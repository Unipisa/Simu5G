[General]
image-path=../../../images
output-scalar-file-append = false
repeat=10
seed-set = ${repetition}

############### Statistics ##################
output-scalar-file = ${resultdir}/${configname}/${iterationvars}-${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${iterationvars}-${repetition}.vec

**.vector-recording = false
**.sctp.**.scalar-recording = false  # remove annoying statistics from SCTP
**.sctp.**.vector-recording = false  # remove annoying statistics from SCTP
**.routingRecorder.enabled = false

############ Floorplan definition #################
**.mobility.constraintAreaMaxX = 2000m
**.mobility.constraintAreaMaxY = 2000m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = false

############### Number of Resource Blocks ################
**.numBands = 50

############### Transmission Power ##################
**.ueTxPower = 26
**.eNodeBTxPower = 30

**.targetBler = 0.01
**.blerShift = 5  

############### SCTP configuration ##################
**.sctp.nagleEnabled = false         # if true, transmission of small packets will be delayed on the X2
**.sctp.enableHeartbeats = false

############### IPv4 configurator config #################
*.configurator.config = xmldoc("./demo.xml")


#------------------------------------#
# Config DualConnectivity
#
# General topology configuration for the exemplary scenario for Dual Connectivity
# Use "runnable" configurations for testing (see below)
#
[Config DualConnectivity]
network = simu5g.simulations.NR.networks.SingleCell_withSecondaryGnb
sim-time-limit=25s
description = "Base configuration, do not run this config!"

############### e/gNodeB configuration #################
*.masterEnb.mobility.initialX = 300m
*.masterEnb.mobility.initialY = 300m
*.secondaryGnb.mobility.initialX = 600m
*.secondaryGnb.mobility.initialY = 300m

# the LTE eNodeB must instantiate the NR PDCP layer to exploit Dual Connectivity
# the NR gNodeB comes with NR PDCP layer by default
*.masterEnb.nicType = "LteNicEnbD2D"
*.masterEnb.cellularNic.LtePdcpRrcType = "NRPdcpRrcEnb"
*.secondaryGnb.masterId = 1
**.dualConnectivityEnabled = true

############### X2 configuration #################
*.*nb.numX2Apps = 1    # one x2App per peering node
*.*nb.x2App[*].server.localPort = 5000 + ancestorIndex(1) # Server ports (x2App[0]=5000, x2App[1]=5001, ...)
*.masterEnb.x2App[0].client.connectAddress = "secondaryGnb%x2ppp0" 
*.secondaryGnb.x2App[0].client.connectAddress = "masterEnb%x2ppp0" 

############## UE configuration ##################  
# connect the UE's NIC to the corresponding serving eNB
*.ue[*].macCellId = 1
*.ue[*].masterId = 1
*.ue[*].nrMacCellId = 2
*.ue[*].nrMasterId = 2

# include input data from real network
include dt_interface/input_data.ini


#============= Application Setup =============
*.ue[*].numApps = 1
*.server.numApps = ${numUEs}

*.ue[*].app[0].typename = "CbrReceiver"
*.ue[*].app[0].localPort = 3000+ancestorIndex(0) 

*.server.app[*].typename = "CbrSender"
*.server.app[*].destAddress = "ue[" + string(ancestorIndex(0)) +"]" 
*.server.app[*].localPort = 3088+ancestorIndex(0) 
*.server.app[0].destPort = 3000+ancestorIndex(0) 
*.server.app[*].startTime = uniform(0s,0.02s)
*.server.app[*].finishTime = uniform(20s,21s)
#------------------------------------#


###########################
# Runnable configurations #
###########################

# In the current version, the Ip2Nic module of the master eNB (the UE) selects which path
# to follow based on the Type of Service (TOS) field:
# - use master eNB if tos < 10
# - use secondary gNB if 10 <= tos < 20
# - use split bearer if tos >= 20
#
# To change the policy, change the implementation of the Ip2Nic::markPacket() function 

#------------------------------------#
# Policy 1
#
# All connections through the 4G Base station
# 
[Config DC-Policy1]
extends=DualConnectivity
*.server.app[*].tos = -1
#------------------------------------#


#------------------------------------#
# Policy 2
#
# All connections through the 5G Base station
# 
[Config DC-Policy2]
extends=DualConnectivity
*.server.app[*].tos = 10
#------------------------------------#

#------------------------------------#
# Policy 3
#
# All connections exploits Split Bearer
# 
[Config DC-Policy3]
extends=DualConnectivity
*.server.app[*].tos = 20
#------------------------------------#





#------------------------------------#
# Config SingleCell
#
# Use "runnable" configurations for testing (see below)
#
[Config CarrierAggregation]
network = simu5g.simulations.NR.networks.SingleCell_Standalone
sim-time-limit=25s
warmup-period = 1s

############### CA configuration ################
*.carrierAggregation.numComponentCarriers = 2
*.carrierAggregation.componentCarrier[0].carrierFrequency = 0.7GHz
*.carrierAggregation.componentCarrier[0].numBands = ${numRbs=25}
*.carrierAggregation.componentCarrier[1].carrierFrequency = 2GHz
*.carrierAggregation.componentCarrier[1].numBands = ${numRbs}

*.gnb.cellularNic.numCarriers = 2
*.gnb.cellularNic.channelModel[0].componentCarrierIndex = 0
*.gnb.cellularNic.channelModel[1].componentCarrierIndex = 1   

*.ue[*].cellularNic.numNRCarriers = 2
*.ue[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 0
*.ue[*].cellularNic.nrChannelModel[1].componentCarrierIndex = 1

**.fading = true
**.shadowing = true

############### e/gNodeB configuration #################
*.gnb.mobility.initialX = 1000m
*.gnb.mobility.initialY = 1000m

########## Background cells configuration #############
*.numBgCells = ${numBgCells=6}

# each background cell has the same number of background UEs as the central gNB
*.bgCell[*].bgTrafficGenerator.numBgUes = 20

*.bgCell[0].mobility.initialX = 750m
*.bgCell[0].mobility.initialY = 567m
*.bgCell[1].mobility.initialX = 1500m
*.bgCell[1].mobility.initialY = 1000m
*.bgCell[2].mobility.initialX = 750m
*.bgCell[2].mobility.initialY = 1433m
*.bgCell[3].mobility.initialX = 750m
*.bgCell[3].mobility.initialY = 567m
*.bgCell[4].mobility.initialX = 1500m
*.bgCell[4].mobility.initialY = 1000m
*.bgCell[5].mobility.initialX = 750m
*.bgCell[5].mobility.initialY = 1433m

*.bgCell[0].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(500m,1000m)
*.bgCell[0].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(317m,817m)
*.bgCell[1].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(1250m,1750m)
*.bgCell[1].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(750m,1250m)
*.bgCell[2].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(500m,1000m)
*.bgCell[2].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(1183m,1933m)
*.bgCell[3].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(500m,1000m)
*.bgCell[3].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(317m,817m)
*.bgCell[4].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(1250m,1750m)
*.bgCell[4].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(750m,1250m)
*.bgCell[5].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(500m,1000m)
*.bgCell[5].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(1183m,1933m)

*.bgCell[*].bgScheduler.isNr = true
*.bgCell[0..2].bgScheduler.carrierFrequency = 0.7GHz
*.bgCell[3..5].bgScheduler.carrierFrequency = 2GHz
*.bgCell[*].bgScheduler.txPower = 30
*.bgCell[*].bgScheduler.numBands = ${numRbs}
*.bgCell[*].bgScheduler.numerologyIndex = 0

*.bgCell[*].bgTrafficGenerator.enablePeriodicCqiUpdate = true
*.bgCell[*].bgTrafficGenerator.useProbabilisticCqi = false
*.bgCell[*].bgTrafficGenerator.bgUE[*].trafficGeneratorType = "TrafficGeneratorCbr"
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.startTimeDl = uniform(0s,0.05s)
*.bgCell[0..2].bgTrafficGenerator.bgUE[*].generator.packetSizeDl = 500B
*.bgCell[0..2].bgTrafficGenerator.bgUE[*].generator.periodDl = 0.01s
*.bgCell[3..5].bgTrafficGenerator.bgUE[*].generator.packetSizeDl = 500B
*.bgCell[3..5].bgTrafficGenerator.bgUE[*].generator.periodDl = 0.01s

############## UE configuration ##################  
# connect the UE's NIC to the corresponding serving eNB
*.ue[*].macCellId = 0
*.ue[*].masterId = 0
*.ue[*].nrMacCellId = 1
*.ue[*].nrMasterId = 1

# include input data from real network
include dt_interface/input_data.ini


#============= Application Setup =============
*.ue[*].numApps = 1
*.server.numApps = ${numUEs}

*.ue[*].app[0].typename = "CbrReceiver"
*.ue[*].app[0].localPort = 3000+ancestorIndex(0) 

*.server.app[*].typename = "CbrSender"
*.server.app[*].destAddress = "ue[" + string(ancestorIndex(0)) +"]" 
*.server.app[*].localPort = 3088+ancestorIndex(0) 
*.server.app[0].destPort = 3000+ancestorIndex(0) 
*.server.app[*].startTime = uniform(0s,0.02s)
*.server.app[*].finishTime = uniform(20s,21s)
#------------------------------------#


#------------------------------------#
# CA-Default
#
# The scheduler tries to allocate as much UEs as possible in the first available CC
# 
[Config CA-Default]
extends=CarrierAggregation

**.carrierAssignerDisciplineDl = "DEFAULT"

#------------------------------------#
# CA-FirstOnly
#
# The scheduler allocates UEs in the first CC only
# 
[Config CA-FirstOnly]
extends=CarrierAggregation

**.carrierAssignerDisciplineDl = "FIRST_ONLY"


# CA-BestChannel
#
# The scheduler allocates UEs in the CC with the best channel quality
# 
[Config CA-BestChannel]
extends=CarrierAggregation

**.carrierAssignerDisciplineDl = "BEST_CHANNEL"







[Config MecOrchestration]
network = simu5g.simulations.NR.digitalTwin_example.MultiMec
sim-time-limit=20s
warmup-period = 0s
repeat=1
**.vector-recording = true

############### CA configuration ################
*.carrierAggregation.numComponentCarriers = 1
*.carrierAggregation.componentCarrier[0].carrierFrequency = ${f=2GHz}
*.carrierAggregation.componentCarrier[0].numBands = ${numRbs=25}

############### e/gNodeB configuration #################
*.gnb.mobility.initialX = 1000m
*.gnb.mobility.initialY = 1000m

*.gnb.cellularNic.bgTrafficGenerator[0].numBgUes = 5
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].mobility.initialX = uniform(500m,1500m)
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].mobility.initialY = uniform(500m,1500m)
*.gnb.cellularNic.bgTrafficGenerator[0].enablePeriodicCqiUpdate = true
*.gnb.cellularNic.bgTrafficGenerator[0].useProbabilisticCqi = false
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].trafficGeneratorType = "TrafficGeneratorCbr"
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeDl = uniform(0s,0.05s)
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeDl = 500B
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodDl = 0.01s


########## Background cells configuration #############
*.numBgCells = ${numBgCells=3}

# each background cell has the same number of background UEs as the central gNB
*.bgCell[*].bgTrafficGenerator.numBgUes = 5

*.bgCell[0].mobility.initialX = 750m
*.bgCell[0].mobility.initialY = 567m
*.bgCell[1].mobility.initialX = 1500m
*.bgCell[1].mobility.initialY = 1000m
*.bgCell[2].mobility.initialX = 750m
*.bgCell[2].mobility.initialY = 1433m

*.bgCell[0].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(500m,1000m)
*.bgCell[0].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(317m,817m)
*.bgCell[1].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(1250m,1750m)
*.bgCell[1].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(750m,1250m)
*.bgCell[2].bgTrafficGenerator.bgUE[*].mobility.initialX = uniform(500m,1000m)
*.bgCell[2].bgTrafficGenerator.bgUE[*].mobility.initialY = uniform(1183m,1933m)

*.bgCell[*].bgScheduler.isNr = true
*.bgCell[*].bgScheduler.carrierFrequency = ${f}
*.bgCell[*].bgScheduler.txPower = 30
*.bgCell[*].bgScheduler.numBands = ${numRbs}

*.bgCell[*].bgTrafficGenerator.enablePeriodicCqiUpdate = true
*.bgCell[*].bgTrafficGenerator.useProbabilisticCqi = false
*.bgCell[*].bgTrafficGenerator.bgUE[*].trafficGeneratorType = "TrafficGeneratorCbr"
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.startTimeDl = uniform(0s,0.05s)
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.packetSizeDl = 500B
*.bgCell[*].bgTrafficGenerator.bgUE[*].generator.periodDl = 0.01s

############ MEC Configuration ############

# MEC Hosts
*.mecHost*.virtualisationInfrastructure.ipv4.forwarding = true
*.mecHost*.maxMECApps = 100
*.mecHost1.maxCpuSpeed = 500     	    	# max CPU
*.mecHost2.maxCpuSpeed = 5000				# max CPU
*.mecHost*.bsList = "gnb"

# MEC Orchestrator configuration
*.mecOrchestrator.mecHostList = "mecHost1, mecHost2"              # MEC hosts associated to the MEC system
*.mecHost*.mecPlatformManager.mecOrchestrator = "mecOrchestrator" # the MECPM needs to know the MEC orchestrator
*.mecHost*.vim.scheduling = "fair"

*.mecHost*.independentMecApp[0].typename = "TaskOffloadingResponder"
*.mecHost*.independentMecApp[0].enableVimComputing = true
*.mecHost*.independentMecApp[0].destAddress = "ue[0]"

*.mecHost*.bgApp[*].cpu = 50

############## UE configuration ##################  
# connect the UE's NIC to the corresponding serving gNB
*.ue[*].macCellId = 0
*.ue[*].masterId = 0
*.ue[*].nrMacCellId = 1
*.ue[*].nrMasterId = 1

*.numUe = 1
*.ue[*].mobility.initialX = 1000m
*.ue[*].mobility.initialY = 1200m

*.ue[*].numApps = 1
*.ue[*].app[0].typename = "TaskOffloadingRequester"
*.ue[*].app[0].localPort = 3000
*.ue[*].app[0].destPort = 3000
*.ue[*].app[0].sampling_time = 100ms
*.ue[*].app[0].startTime = 0s
*.ue[*].app[0].numTaskInstructions = intuniform(1000000,2000000)

# include input data from real network
include dt_interface/input_data.ini


#------------------------------------#
# MecOrchestration-1
#
# The MEO instantiates the new app on MEC Host 1
# 
[Config MecOrchestration-1]
extends=MecOrchestration

*.mecHost1.numIndependentMecApp = 1
*.mecHost1.*.numIndependentMecApp = 1
*.mecHost2.numIndependentMecApp = 0
*.mecHost2.*.numIndependentMecApp = 0

*.ue[*].app[0].destAddress = "mecHost1.virtualisationInfrastructure"


# MecOrchestration-2
#
# The MEO instantiates the new app on MEC Host 2
# 
[Config MecOrchestration-2]
extends=MecOrchestration

*.mecHost1.numIndependentMecApp = 0
*.mecHost1.*.numIndependentMecApp = 0
*.mecHost2.numIndependentMecApp = 1
*.mecHost2.*.numIndependentMecApp = 1

*.ue[*].app[0].destAddress = "mecHost2.virtualisationInfrastructure"


