[General]
image-path=../../../images
output-scalar-file-append = false
sim-time-limit=50s
network = simu5g.simulations.NR.networks.SingleCell_Standalone

**.routingRecorder.enabled = false

############### Statistics ##################
seed-set = ${repetition}
**.sctp.**.scalar-recording = false  # remove annoying statistics from SCTP
**.sctp.**.vector-recording = false  # remove annoying statistics from SCTP
**.vector-recording = true

################ Mobility parameters #####################
# *
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = false

############### Transmission Power ##################
**.eNodeBTxPower = 40dBm

############### SCTP configuration ##################
**.sctp.nagleEnabled = false         # if true, transmission of small packets will be delayed on the X2
**.sctp.enableHeartbeats = false

############### General PHY parameters ##############
**.downlink_interference = true
**.uplink_interference = true
**.enableHandover = true
**.fbPeriod = 10tti   # reports CQI every 10ms
**.targetBler = 0.01
**.blerShift = 5

############### IPv4 configurator config #################
*.configurator.config = xmldoc("./demo.xml")


############### e/gNodeB configuration #################
*.gnb.mobility.initialX = 300m
*.gnb.mobility.initialY = 300m

############## UE configuration ##################
*.numUe = ${numUe=10}

# connect the UE's NIC to the corresponding serving eNB
*.ue[*].macCellId = 0
*.ue[*].masterId = 0
*.ue[*].nrMacCellId = 1
*.ue[*].nrMasterId = 1

# UE mobility
**.mobility.constraintAreaMaxX = 700m
**.mobility.constraintAreaMaxY = 400m
**.mobility.constraintAreaMinX = 100m
**.mobility.constraintAreaMinY = 200m

*.ue[*].mobility.typename = "RandomWaypointMobility"
*.ue[*].mobility.initialX = uniform(100m,500m)
*.ue[*].mobility.initialY = uniform(200m,400m)
*.ue[*].mobility.speed = uniform(5mps,15mps)

# one UDP application for each user
*.ue[*].numApps = 1

# the amount of UDP applications on server should be equal to (numUEs)*(ue[*].numUdpApps)
*.server.numApps = ${numUe}

output-scalar-file = ${resultdir}/${configname}/${iterationvars}-${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${iterationvars}-${repetition}.vec
#------------------------------------#


#------------------------------------#
# General configuration for CBR DL traffic
#
# Use "runnable" configurations for testing (see below)
#
[Config CBR-DL]

#============= Application Setup =============
*.ue[*].app[*].typename = "CbrReceiver"
*.ue[*].app[*].localPort = 1000

*.server.app[*].sampling_time = 0.02s
*.server.app[*].destAddress = "ue["+string(ancestorIndex(0))+"]" # obtain the address of the client by reading its index in the array of udp Apps
*.server.app[*].destPort = 1000
*.server.app[*].localPort = 3088+ancestorIndex(0)
*.server.app[*].typename = "CbrSender"
*.server.app[*].startTime = uniform(0.01s,0.02s)
*.server.app[*].PacketSize = 2000B
#------------------------------------#


#------------------------------------#
# General configuration for CBR UL traffic
#
# Use "runnable" configurations for testing (see below)
#
[Config CBR-UL]

#============= Application Setup =============
*.server.app[*].typename = "CbrReceiver"
*.server.app[*].localPort = 1000+ancestorIndex(0)

# obtain the address of the client by reading its index in the array of udp Apps
*.ue[*].app[*].destAddress = "server"
*.ue[*].app[*].localPort = 3088+ancestorIndex(0)
*.ue[*].app[*].destPort = 1000+ancestorIndex(1)
*.ue[*].app[*].typename = "CbrSender"
*.ue[*].app[*].startTime = uniform(0s,0.02s)
*.ue[*].app[*].PacketSize = 2000B
#------------------------------------#

#------------------------------------#
# General configuration for single-carrier configuration
#
# Use "runnable" configurations for testing (see below)
#
[Config SingleCarrier]

############### CA configuration ################
*.carrierAggregation.numComponentCarriers = 1
*.carrierAggregation.componentCarrier[0].carrierFrequency = 2GHz
*.carrierAggregation.componentCarrier[0].numBands = 6

*.gnb.cellularNic.numCarriers = 1
*.gnb.cellularNic.channelModel[0].componentCarrierIndex = 0

*.ue[*].cellularNic.numNRCarriers = 1
*.ue[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 0
#------------------------------------#


#------------------------------------#
# General configuration for single-carrier configuration
#
# Use "runnable" configurations for testing (see below)
#
[Config MultiCarrier]

############### CA configuration ################
*.carrierAggregation.numComponentCarriers = 2
*.carrierAggregation.componentCarrier[0].carrierFrequency = 2GHz
*.carrierAggregation.componentCarrier[0].numBands = 6
*.carrierAggregation.componentCarrier[1].carrierFrequency = 6GHz
*.carrierAggregation.componentCarrier[1].numBands = 6

*.gnb.cellularNic.numCarriers = 2
*.gnb.cellularNic.channelModel[0].componentCarrierIndex = 0
*.gnb.cellularNic.channelModel[1].componentCarrierIndex = 1

*.ue[*].cellularNic.numNRCarriers = 2
*.ue[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 0
*.ue[*].cellularNic.nrChannelModel[1].componentCarrierIndex = 1
#------------------------------------#



###########################
# RUNNABLE CONFIGURATIONS #
###########################
[Config SingleCarrier-CBR-DL]
extends=SingleCarrier, CBR-DL

[Config SingleCarrier-CBR-UL]
extends=SingleCarrier, CBR-UL

[Config MultiCarrier-CBR-DL]
extends=MultiCarrier, CBR-DL

[Config MultiCarrier-CBR-UL]
extends=MultiCarrier, CBR-UL

