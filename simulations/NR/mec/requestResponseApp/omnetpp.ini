[General]
image-path=../../../images
output-scalar-file-append = false
**.routingRecorder.enabled = false

############### Statistics ##################
output-scalar-file = ${resultdir}/${configname}/${configname}-${iterationvars}-${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${configname}-${iterationvars}-${repetition}.vec
seed-set = ${repetition}
num-rngs = 3
repeat = 31
**.sctp.**.scalar-recording = false  # remove annoying statistics from SCTP
**.sctp.**.vector-recording = false  # remove annoying statistics from SCTP
**.mecHost*.**.vector-recording = true
**.ue[*].app[1].**.vector-recording = true
**.vector-recording = false

warmup-period  = 10s

############### SCTP configuration ##################
**.sctp.nagleEnabled = false         # if true, transmission of small packets will be delayed on the X2
**.sctp.enableHeartbeats = false

############### General PHY parameters ##############
**.downlink_interference = true
**.uplink_interference = true
**.ueTxPower = 26dBm
**.eNodeBTxPower = 46dBm
**.targetBler = 0.01
**.blerShift = 5
**.fbPeriod = 40tti   # reports CQI every 40ms

############### IPv4 configurator config #################
*.configurator.config = xmldoc("./demo.xml")


#------------------------------------#
# Config MultiMec
#
# General configuration for the for a multicell, multi-MEC system
#
[Config MultiMec]
sim-time-limit=160s
network = simu5g.simulations.NR.mec.requestResponseApp.MultiMecHost_delay

############# Floorplan parameters ################
**.mobility.constraintAreaMaxX = 1000m
**.mobility.constraintAreaMaxY = 750m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 250m
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = false

############### CA configuration #################
*.carrierAggregation.numComponentCarriers = 1
*.carrierAggregation.componentCarrier[0].numerologyIndex = 0
*.carrierAggregation.componentCarrier[0].carrierFrequency = 4GHz
*.carrierAggregation.componentCarrier[0].numBands = 50#${numRbs=50}

*.gnb*.cellularNic.numCarriers = 1
*.gnb*.cellularNic.channelModel[0].componentCarrierIndex = 0
*.ue[*].cellularNic.numCarriers = 1
*.ue[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 0

############### BS position #################
*.gnb1.mobility.initialX = 250m
*.gnb1.mobility.initialY = 500m
*.gnb2.mobility.initialX = 750m
*.gnb2.mobility.initialY = 500m

############### X2 configuration #################
#*.gnb*.numX2Apps = 1                                        # one x2App per peering node
#*.gnb*.x2App[*].server.localPort = 5000 + ancestorIndex(1)  # Server ports (x2App[0]=5000, x2App[1]=5001, ...)
#*.gnb1.x2App[0].client.connectAddress = "gnb2%x2ppp0"
#*.gnb2.x2App[0].client.connectAddress = "gnb1%x2ppp0"

############## UE configuration ##################
*.numUe = 1

# UEs associates to the best BS at the beginning of the simulation
*.ue[*].macCellId = 0
*.ue[*].masterId = 0
*.ue[*].nrMacCellId = 1
*.ue[*].nrMasterId = 1
**.dynamicCellAssociation = false
**.enableHandover = false

############ UEs position #################
*.ue[0].mobility.initialX = 280m
*.ue[*].mobility.initialY = 500m

############ MEC Configuration ############
**.hasRNISupport = true

# tcp settings
**.tcp.typename = "Tcp"
**.tcp.advertisedWindow = 65535         # in bytes, corresponds with the maximal receiver buffer capacity (Note: normally, NIC queues should be at least this size)
**.tcp.tcpAlgorithmClass = "TcpReno"    # TcpReno/TcpTahoe/TcpNewReno/TcpNoCongestionControl/DumbTcp
**.tcp.sackSupport = true               # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)
**.tcp.nagleEnabled = false
**.tcp.mss = 1452

# MEC Hosts
**.mecHost*.virtualisationInfrastructure.ipv4.forwarding = true
**.mecHost*.vim.scheduling = "fair"
*.mecHost*.maxMECApps = 1000					# max ME Apps to instantiate
*.mecHost*.maxRam = 32GB					# max KBytes of Ram
*.mecHost*.maxDisk = 100TB					# max KBytes of Disk Space
*.mecHost1.maxCpuSpeed = 330000		    	# max CPU
*.mecHost2.maxCpuSpeed = 990000				# max CPU

*.mecHost*.eNBList = "gnb1, gnb2"

# MEC Services
# MEC host 1 services configurations
*.mecHost1.mecPlatform.numMecServices = 1
*.mecHost1.mecPlatform.mecService[0].typename = "RNIService"
*.mecHost1.mecPlatform.mecService[0].localAddress = "mecHost1.virtualisationInfrastructure"
*.mecHost1.mecPlatform.mecService[0].localPort = 10020
*.mecHost1.mecPlatform.serviceRegistry.localAddress = "mecHost1.virtualisationInfrastructure"
*.mecHost1.mecPlatform.serviceRegistry.localPort = 10021

# MEC host 2 services configurations
*.mecHost2.mecPlatform.numMecServices = 1
*.mecHost2.mecPlatform.mecService[0].typename = "RNIService"
*.mecHost2.mecPlatform.mecService[0].localAddress = "mecHost2.virtualisationInfrastructure"
*.mecHost2.mecPlatform.mecService[0].localPort = 10020
*.mecHost2.mecPlatform.serviceRegistry.localAddress = "mecHost2.virtualisationInfrastructure"
*.mecHost2.mecPlatform.serviceRegistry.localPort = 10021

# random number generators configuration
*.mecHost*.mecPlatform.serviceRegistry.rng-0 = 0 # request service time
*.mecHost*.mecPlatform.serviceRegistry.rng-1 = 1 # subscription service time
*.mecHost*.mecPlatform.mecService[0].rng-0 = 1 # request service time
*.mecHost*.mecPlatform.mecService[0].rng-1 = 2 # subscription service time
*.mecHost*.mecPlatform.mecService[0].requestServiceTime = 4ms
*.mecHost*.mecPlatform.mecService[0].subscriptionServiceTime = 11us

# MEC Orchestrator configuration
*.mecOrchestrator.mecHostList = "mecHost1, mecHost2"              # MEC hosts associated to the MEC system
*.mecOrchestrator.mecApplicationPackageList = "ResponseApp"   # List of MEC app descriptors to be onboarded at
*.mecHost*.mecPlatformManager.mecOrchestrator = "mecOrchestrator" # the MECPM needs to know the MEC orchestrator


############# Client App configuration ################

#------------UEWarningAlertApp---------------
*.ue[*].numApps = 2
*.ue[*].app[0].typename = "DeviceApp"
*.ue[*].app[0].localPort = 4500
*.ue[*].app[0].UALCMPAddress = "ualcmp"
*.ue[*].app[0].UALCMPPort = 1000
*.ue[*].app[0].appPackageSource = "ApplicationDescriptors/ResponseApp.json"

*.ue[*].app[1].typename = "UERequestApp"
*.ue[*].app[1].deviceAppAddress = "ue["+string(ancestorIndex(1))+"]"
*.ue[*].app[1].deviceAppPort = 4500
*.ue[*].app[1].startTime = 5s
*.ue[*].app[1].stopTime = 190s

*.ue[*].app[1].positionX = 600m
*.ue[*].app[1].positionY = 600m
#------------------------------------#

*.routersDelay = 2m# ${delay = 1ms, 5ms, 10ms}

# Do not use the following configurations!
[Config nearRNI]
extends = MultiMec
*.mecHost2.mecPlatform.numMecServices = 0

[Config farRNI]
extends = MultiMec
*.mecHost1.mecPlatform.numMecServices = 0

[Config lightTask]
**.minInstructions = 20000
**.maxInstructions = 40000

[Config heavyTask]
**.minInstructions = 5000000
**.maxInstructions = 6000000

[Config bgUEs_gnb1]
extends = MultiMec
*.gnb1.cellularNic.bgTrafficGenerator[0].bgUE[*].mobility.initialX = uniform(100m,500m)
*.gnb1.cellularNic.bgTrafficGenerator[0].bgUE[*].mobility.initialY = uniform(250m,750m)

# --- Background UEs in the central cell --- #
*.gnb1.cellularNic.bgTrafficGenerator[0].enablePeriodicCqiUpdate = true
*.gnb1.cellularNic.bgTrafficGenerator[0].useProbabilisticCqi = true#${probCqi=false}
*.gnb1.cellularNic.bgTrafficGenerator[0].bgUE[*].trafficGeneratorType = "TrafficGeneratorCbr"
*.gnb1.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeDl = uniform(0s,0.05s)
*.gnb1.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeDl = 250B
*.gnb1.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeUl = uniform(0s,0.05s)
*.gnb1.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeUl = 200B
*.gnb1.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodDl =uniform(100ms,150ms)
*.gnb1.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodUl =uniform(100ms,150ms)

[Config bgUEs_gnb2]
extends = MultiMec
*.gnb2.cellularNic.bgTrafficGenerator[0].bgUE[*].mobility.initialX = uniform(100m,500m)
*.gnb2.cellularNic.bgTrafficGenerator[0].bgUE[*].mobility.initialY = uniform(250m,750m)

# --- Background UEs in the central cell --- #
*.gnb2.cellularNic.bgTrafficGenerator[0].enablePeriodicCqiUpdate = true
*.gnb2.cellularNic.bgTrafficGenerator[0].useProbabilisticCqi = true#${probCqi=false}
*.gnb2.cellularNic.bgTrafficGenerator[0].bgUE[*].trafficGeneratorType = "TrafficGeneratorCbr"
*.gnb2.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeDl = uniform(0s,0.05s)
*.gnb2.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeDl = 50B
*.gnb2.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeUl = uniform(0s,0.05s)
*.gnb2.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeUl = 10B
*.gnb2.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodDl =uniform(100ms,200ms)
*.gnb2.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodUl =uniform(100ms,200ms)

[Config nearRNI_bgUEs_gnb1]
extends = bgUEs_gnb1 , nearRNI

[Config nearRNI_bgUEs_gnb2]
extends = bgUEs_gnb2 , nearRNI
# -----------------------------------------------------

# Use only the following configurations!
[Config best_case]
extends = nearRNI, bgUEs_gnb1, bgUEs_gnb2
*.mecOrchestrator.selectionPolicy = "MecServiceBased"#MecServiceBased or AvailableResourcesBased

*.gnb1.cellularNic.bgTrafficGenerator[0].numBgUes = ${numBgUEs1= 50, 100..650 step 50}
*.mecHost1.numBGMecApp = ${numBgUEs1}

*.gnb2.cellularNic.bgTrafficGenerator[0].numBgUes = ${numBgUEs2= 50}
*.mecHost2.numBGMecApp = ${numBgUEs2}

[Config best_case_load_gen]
extends = best_case
*.mecHost*.mecPlatform.mecService[0].loadGenerator = true
*.mecHost*.mecPlatform.mecService[0].betaa = 0.34
#*.mecHost.mecPlatform.mecService[0].numBGApps = ${numApp = 10, 100, 200, 400, 600, 800, 1000, 2000}
*.mecHost*.mecPlatform.mecService[0].numBGApps = ${numBgUEs1}
*.mecHost*.mecPlatform.mecService[0].requestServiceTime = 0.5ms

[Config worst_case]
extends = nearRNI, bgUEs_gnb1, bgUEs_gnb2
*.mecOrchestrator.selectionPolicy = "AvailableResourcesBased"
#*.mecOrchestrator.mecHostIndex = 1

*.gnb2.cellularNic.bgTrafficGenerator[0].numBgUes = ${numBgUEs1= 50}#, 100..650 step 100}
*.mecHost1.numBGMecApp = ${numBgUEs1}

*.gnb1.cellularNic.bgTrafficGenerator[0].numBgUes = ${numBgUEs2= 50, 100..650 step 50}
*.mecHost2.numBGMecApp = ${numBgUEs2}

[Config worst_case_load_gen]
extends = worst_case
*.mecHost*.mecPlatform.mecService[0].loadGenerator = true
*.mecHost*.mecPlatform.mecService[0].betaa = 0.34
#*.mecHost.mecPlatform.mecService[0].numBGApps = ${numApp = 10, 100, 200, 400, 600, 800, 1000, 2000}
*.mecHost*.mecPlatform.mecService[0].numBGApps = ${numBgUEs2}
*.mecHost*.mecPlatform.mecService[0].requestServiceTime = 0.5ms
# ------------------------------------------------------------------------
