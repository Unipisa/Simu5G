[General]
image-path=../../../images
output-scalar-file-append = false
**.routingRecorder.enabled = false

**.cmdenv-log-level = off

############### Statistics ##################
output-scalar-file = ${resultdir}/${configname}-fourOps/${configname}-${iterationvars}-${repetition}.sca
output-vector-file = ${resultdir}/${configname}-fourOps/${configname}-${iterationvars}-${repetition}.vec
seed-set = ${repetition}
num-rngs = 9
repeat = 1

**.sctp.**.scalar-recording = false  # remove annoying statistics from SCTP
**.sctp.**.vector-recording = false  # remove annoying statistics from SCTP

**.ue*[*].vector-recording = true
**.vector-recording = true

############### SCTP configuration ##################
**.sctp.nagleEnabled = false         # if true, transmission of small packets will be delayed on the X2
**.sctp.enableHeartbeats = false

############### General PHY parameters ##############
**.downlink_interference = true
**.uplink_interference = true
**.ueTxPower = 26
**.eNodeBTxPower = 46
**.targetBler = 0.01
**.blerShift = 5  
**.fbPeriod = 40   # reports CQI every 40ms

############### IPv4 configurator config #################
*.configurator.config = xmldoc("./demo.xml")
*.configurator.optimizeRoutes = false   # route optimization causes the simulation to crash in this scenario (don't know why...)

# ------------------------------------------------------------------------ #
# Config MultiOperator
#
# General configuration for the multicell, multi-operator system
# Also see 'demo.xml' for the correct configuration of network interfaces 
#
[Config MultiOperator]
description = "Base configuration, do not run this config!"
sim-time-limit= 60s
network = simu5g.simulations.NR.mec.platooning.MultiOperatorPP

############# Floorplan parameters ################
**.mobility.constraintAreaMaxX = 2700m
**.mobility.constraintAreaMaxY = 1550m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 250m
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = false

############### CA configuration ################# 
# we configure four carrier components, one for each operator
*.carrierAggregation.numComponentCarriers = 4
*.carrierAggregation.componentCarrier[0].carrierFrequency = 2GHz
*.carrierAggregation.componentCarrier[1].carrierFrequency = 4GHz
*.carrierAggregation.componentCarrier[2].carrierFrequency = 6GHz
*.carrierAggregation.componentCarrier[3].carrierFrequency = 8GHz

*.carrierAggregation.componentCarrier[*].numerologyIndex = 0 #${u}
*.carrierAggregation.componentCarrier[*].numBands = 50 #${numRbs=50}

*.gnb*.cellularNic.numCarriers = 1
*.ue_*[*].cellularNic.numCarriers = 1

*.gnb_A*.cellularNic.channelModel[0].componentCarrierIndex = 0
*.gnb_B*.cellularNic.channelModel[0].componentCarrierIndex = 1
*.gnb_C*.cellularNic.channelModel[0].componentCarrierIndex = 2
*.gnb_D*.cellularNic.channelModel[0].componentCarrierIndex = 3
*.ue_A[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 0
*.ue_B[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 1
*.ue_C[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 2
*.ue_D[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 3
**.cellularNic.LteChannelModelType = "NRChannelModel_3GPP38_901"

############### BS position #################
# operator A's and B's gNBs are co-located
*.gnb_*.mobility.initialY = 500m
#*.gnb_B*.mobility.initialY = 520m
*.gnb_*1.mobility.initialX = 250m
*.gnb_*2.mobility.initialX = 750m
*.gnb_*3.mobility.initialX = 1250m
*.gnb_*4.mobility.initialX = 1750m

############## BS gateway ##################
*.gnb_A*.gateway = "upf_A"
*.gnb_B*.gateway = "upf_B"
*.gnb_C*.gateway = "upf_C"
*.gnb_D*.gateway = "upf_D"

############### X2 configuration #################
*.gnb_*2.numX2Apps = 2                                        # one x2App per peering node
*.gnb_*3.numX2Apps = 2                                        # one x2App per peering node
*.gnb*.numX2Apps = 1                                          # one x2App per peering node
*.gnb*.x2App[*].server.localPort = 5000 + ancestorIndex(1)  # Server ports (x2App[0]=5000, x2App[1]=5001, ...)

*.gnb_A1.x2App[0].client.connectAddress = "gnb_A2%x2ppp0" 
*.gnb_A2.x2App[0].client.connectAddress = "gnb_A1%x2ppp0" 
*.gnb_A2.x2App[1].client.connectAddress = "gnb_A3%x2ppp0" 
*.gnb_A3.x2App[0].client.connectAddress = "gnb_A2%x2ppp1" 
*.gnb_A3.x2App[1].client.connectAddress = "gnb_A4%x2ppp0"
*.gnb_A4.x2App[0].client.connectAddress = "gnb_A3%x2ppp1"
 
*.gnb_B1.x2App[0].client.connectAddress = "gnb_B2%x2ppp0" 
*.gnb_B2.x2App[0].client.connectAddress = "gnb_B1%x2ppp0" 
*.gnb_B2.x2App[1].client.connectAddress = "gnb_B3%x2ppp0" 
*.gnb_B3.x2App[0].client.connectAddress = "gnb_B2%x2ppp1" 
*.gnb_B3.x2App[1].client.connectAddress = "gnb_B4%x2ppp0" 
*.gnb_B4.x2App[0].client.connectAddress = "gnb_B3%x2ppp1" 

*.gnb_C1.x2App[0].client.connectAddress = "gnb_C2%x2ppp0" 
*.gnb_C2.x2App[0].client.connectAddress = "gnb_C1%x2ppp0" 
*.gnb_C2.x2App[1].client.connectAddress = "gnb_C3%x2ppp0" 
*.gnb_C3.x2App[0].client.connectAddress = "gnb_C2%x2ppp1" 
*.gnb_C3.x2App[1].client.connectAddress = "gnb_C4%x2ppp0"
*.gnb_C4.x2App[0].client.connectAddress = "gnb_C3%x2ppp1"
 
*.gnb_D1.x2App[0].client.connectAddress = "gnb_D2%x2ppp0" 
*.gnb_D2.x2App[0].client.connectAddress = "gnb_D1%x2ppp0" 
*.gnb_D2.x2App[1].client.connectAddress = "gnb_D3%x2ppp0" 
*.gnb_D3.x2App[0].client.connectAddress = "gnb_D2%x2ppp1" 
*.gnb_D3.x2App[1].client.connectAddress = "gnb_D4%x2ppp0" 
*.gnb_D4.x2App[0].client.connectAddress = "gnb_D3%x2ppp1" 


################## UE configuration ##################
*.numUe_A = 4
*.numUe_B = 4
*.numUe_C = 4
*.numUe_D = 4

# UEs associates to the best BS at the beginning of the simulation
*.ue*[*].macCellId = 0
*.ue*[*].masterId = 0
*.ue_A[*].nrMacCellId = 1
*.ue_A[*].nrMasterId = 1
*.ue_B[*].nrMacCellId = 5
*.ue_B[*].nrMasterId = 5
*.ue_C[*].nrMacCellId = 9
*.ue_C[*].nrMasterId = 9
*.ue_D[*].nrMacCellId = 13
*.ue_D[*].nrMasterId = 13
**.dynamicCellAssociation = true
**.enableHandover = true

############ UEs position #################
*.ue*[*].mobility.typename = "LinearAccelerationMobility"


*.ue*[*].mobility.initialY = 600m
*.ue*[*].mobility.speed = 25mps# uniform(22mps, 24mps)
*.ue*[*].mobility.initialMovementHeading = 0deg


############ MEC Configuration ############
**.hasRNISupport = false

# tcp settings
**.tcp.typename = "Tcp"
**.tcp.advertisedWindow = 65535         # in bytes, corresponds with the maximal receiver buffer capacity (Note: normally, NIC queues should be at least this size)
**.tcp.tcpAlgorithmClass = "TcpReno"    # TcpReno/TcpTahoe/TcpNewReno/TcpNoCongestionControl/DumbTcp
**.tcp.sackSupport = true               # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)

# MEC Hosts
**.mecHost*.virtualisationInfrastructure.ipv4.forwarding = true
*.mecHost*.maxMECApps = 100					# max ME Apps to instantiate
*.mecHost*.maxRam = 32GB					# max KBytes of Ram 
*.mecHost*.maxDisk = 100TB					# max KBytes of Disk Space 
*.mecHost*.maxCpuSpeed = 400000		    	# max CPU
*.mecHost_A*.gateway = "upf_A"
*.mecHost_B*.gateway = "upf_B"
*.mecHost_C*.gateway = "upf_C"
*.mecHost_D*.gateway = "upf_D"

# MEC Services
# MEC host 1 services configurations
*.mecHost*.mecPlatform.numMecServices = 1
*.mecHost*.mecPlatform.mecService[0].typename = "LocationService"
*.mecHost_A.mecPlatform.mecService[0].localAddress = "mecHost_A.virtualisationInfrastructure"
*.mecHost_B.mecPlatform.mecService[0].localAddress = "mecHost_B.virtualisationInfrastructure"
*.mecHost_C.mecPlatform.mecService[0].localAddress = "mecHost_C.virtualisationInfrastructure"
*.mecHost_D.mecPlatform.mecService[0].localAddress = "mecHost_D.virtualisationInfrastructure"

*.mecHost*.mecPlatform.mecService[0].localPort = 10020
*.mecHost_A.mecPlatform.serviceRegistry.localAddress = "mecHost_A.virtualisationInfrastructure"
*.mecHost_B.mecPlatform.serviceRegistry.localAddress = "mecHost_B.virtualisationInfrastructure"
*.mecHost_C.mecPlatform.serviceRegistry.localAddress = "mecHost_C.virtualisationInfrastructure"
*.mecHost_D.mecPlatform.serviceRegistry.localAddress = "mecHost_D.virtualisationInfrastructure"
*.mecHost*.mecPlatform.serviceRegistry.localPort = 10021

# random number generators configuration
*.mecHost_A.mecPlatform.mecService[0].rng-0 = 1 # request service time
*.mecHost_A.mecPlatform.mecService[0].rng-1 = 2 # subscription service time

*.mecHost_B.mecPlatform.mecService[0].rng-0 = 3 # request service time
*.mecHost_B.mecPlatform.mecService[0].rng-1 = 4 # subscription service time

*.mecHost_C.mecPlatform.mecService[0].rng-0 = 5 # request service time
*.mecHost_C.mecPlatform.mecService[0].rng-1 = 6 # subscription service time

*.mecHost_D.mecPlatform.mecService[0].rng-0 = 7 # request service time
*.mecHost_D.mecPlatform.mecService[0].rng-1 = 8 # subscription service time

*.mecHost*.mecPlatform.mecService[0].subscriptionServiceTime = 11us
*.mecHost*.mecPlatform.mecService[0].requestServiceTime = 0.5ms


# MEC Orchestrator & UALCMP configuration
*.mecOrchestrator_A.mecHostList = "mecHost_A"              # MEC hosts associated to the MEC system
*.mecOrchestrator_B.mecHostList = "mecHost_B"              # MEC hosts associated to the MEC system
*.mecOrchestrator_C.mecHostList = "mecHost_C"              # MEC hosts associated to the MEC system
*.mecOrchestrator_D.mecHostList = "mecHost_D"              # MEC hosts associated to the MEC system
*.mecOrchestrator*.mecApplicationPackageList = "PlatooningConsumerApp"   # List of MEC app descriptors to be onboarded at 
*.mecHost_A.mecPlatformManager.mecOrchestrator = "mecOrchestrator_A" # the MECPM needs to know the MEC orchestrator
*.mecHost_B.mecPlatformManager.mecOrchestrator = "mecOrchestrator_B" # the MECPM needs to know the MEC orchestrator
*.mecHost_C.mecPlatformManager.mecOrchestrator = "mecOrchestrator_C" # the MECPM needs to know the MEC orchestrator
*.mecHost_D.mecPlatformManager.mecOrchestrator = "mecOrchestrator_D" # the MECPM needs to know the MEC orchestrator
*.ualcmp_A.mecOrchestratorHostname = "mecOrchestrator_A"
*.ualcmp_B.mecOrchestratorHostname = "mecOrchestrator_B"
*.ualcmp_C.mecOrchestratorHostname = "mecOrchestrator_C"
*.ualcmp_D.mecOrchestratorHostname = "mecOrchestrator_D"
*.ualcmp_A.gateway = "upf_A"
*.ualcmp_B.gateway = "upf_B"
*.ualcmp_C.gateway = "upf_C"
*.ualcmp_D.gateway = "upf_D"

# MEC Platooning Provider App
**.numIndependentMecApp = 1
*.mecHost_*.independentMecApp[0].typename = "MECPlatooningProducerApp"
*.mecHost_*.independentMecApp[0].platooningConsumerAppsPort = 5500
*.mecHost_*.independentMecApp[0].platooningProducerAppsPort = 8500
*.mecHost_A.independentMecApp[0].producerAppId = 0
*.mecHost_B.independentMecApp[0].producerAppId = 1
*.mecHost_C.independentMecApp[0].producerAppId = 2
*.mecHost_D.independentMecApp[0].producerAppId = 3
*.mecHost_*.independentMecApp[0].controller = "rajamani" # ${controller = "rajamani", "safe"}

*.mecHost_*.independentMecApp[0].mecAppIndex = -1 #not relevant for independentMecApps 

*.mecHost_*.independentMecApp[0].mecAppId = 5500
*.mecHost_A.independentMecApp[*].mp1Address= "mecHost_A.virtualisationInfrastructure"
*.mecHost_B.independentMecApp[*].mp1Address= "mecHost_B.virtualisationInfrastructure"
*.mecHost_C.independentMecApp[*].mp1Address= "mecHost_C.virtualisationInfrastructure"
*.mecHost_D.independentMecApp[*].mp1Address= "mecHost_D.virtualisationInfrastructure"
*.mecHost_*.independentMecApp[*].mp1Port = 10021

**.independentMecApp[0].requiredRam = 10MB
**.independentMecApp[0].requiredDisk = 10MB
**.independentMecApp[0].requiredCpu = 1000 #MIPS


# ----------------------------------------------------------------------------------------------------- #
# MultiOperator_MultiMec
#
# In this configuration, UEs connected to operator A's network communicate with operator A's MEC Host, 
#  whereas UEs connected to operator B's network communicate with operator B's MEC host
#
[Config MultiOperator_MultiMec]
extends=MultiOperator

*.enableMecOperator* = true

*.mecHost_A*.bsList = "gnb_A1, gnb_A2, gnb_A3, gnb_A4"
*.mecHost_B*.bsList = "gnb_B1, gnb_B2, gnb_B3, gnb_B4"
*.mecHost_C*.bsList = "gnb_C1, gnb_C2, gnb_C3, gnb_C4"
*.mecHost_D*.bsList = "gnb_D1, gnb_D2, gnb_D3, gnb_D4"

*.mecHost_A.independentMecApp[0].federatedProducerApps = [{id : 1, address: "mecHost_B.virtualisationInfrastructure", port: 8500, \
											   locationServiceAddress: "mecHost_B.virtualisationInfrastructure", locationServicePort: 10020},\
                                                          {id : 2, address: "mecHost_C.virtualisationInfrastructure", port: 8500, \
											   locationServiceAddress: "mecHost_C.virtualisationInfrastructure", locationServicePort: 10020},\
                                                          {id : 3, address: "mecHost_D.virtualisationInfrastructure", port: 8500, \
											   locationServiceAddress: "mecHost_D.virtualisationInfrastructure", locationServicePort: 10020}
                                               ]
*.mecHost_B.independentMecApp[0].federatedProducerApps = [{id : 0, address: "mecHost_A.virtualisationInfrastructure", port: 8500, \
											   locationServiceAddress: "mecHost_A.virtualisationInfrastructure", locationServicePort: 10020},\
                                                          {id : 2, address: "mecHost_C.virtualisationInfrastructure", port: 8500, \
											   locationServiceAddress: "mecHost_C.virtualisationInfrastructure", locationServicePort: 10020},\
                                                          {id : 3, address: "mecHost_D.virtualisationInfrastructure", port: 8500, \
											   locationServiceAddress: "mecHost_D.virtualisationInfrastructure", locationServicePort: 10020}
                                               ]
*.mecHost_C.independentMecApp[0].federatedProducerApps = [{id : 0, address: "mecHost_A.virtualisationInfrastructure", port: 8500, \
											   locationServiceAddress: "mecHost_A.virtualisationInfrastructure", locationServicePort: 10020},\
                                                          {id : 1, address: "mecHost_B.virtualisationInfrastructure", port: 8500, \
											   locationServiceAddress: "mecHost_B.virtualisationInfrastructure", locationServicePort: 10020},\
                                                          {id : 3, address: "mecHost_D.virtualisationInfrastructure", port: 8500, \
											   locationServiceAddress: "mecHost_D.virtualisationInfrastructure", locationServicePort: 10020}
                                               ]
*.mecHost_D.independentMecApp[0].federatedProducerApps = [{id : 0, address: "mecHost_A.virtualisationInfrastructure", port: 8500, \
											   locationServiceAddress: "mecHost_A.virtualisationInfrastructure", locationServicePort: 10020},\
                                                          {id : 1, address: "mecHost_B.virtualisationInfrastructure", port: 8500, \
											   locationServiceAddress: "mecHost_B.virtualisationInfrastructure", locationServicePort: 10020},\
                                                          {id : 2, address: "mecHost_C.virtualisationInfrastructure", port: 8500, \
											   locationServiceAddress: "mecHost_C.virtualisationInfrastructure", locationServicePort: 10020}
                                               ]


#------------UEPlatooningApp---------------
*.ue*[*].numApps = 2
*.ue*[*].app[0].typename = "DeviceApp"
*.ue*[*].app[0].localPort = 4500
*.ue_A[*].app[0].UALCMPAddress = "ualcmp_A"
*.ue_B[*].app[0].UALCMPAddress = "ualcmp_B"
*.ue_C[*].app[0].UALCMPAddress = "ualcmp_C"
*.ue_D[*].app[0].UALCMPAddress = "ualcmp_D"
*.ue*[*].app[0].UALCMPPort = 1000

*.ue*[*].app[1].typename = "UEPlatooningApp"
*.ue_A[*].app[1].deviceAppAddress = "ue_A["+string(ancestorIndex(1))+"]"
*.ue_B[*].app[1].deviceAppAddress = "ue_B["+string(ancestorIndex(1))+"]"
*.ue_C[*].app[1].deviceAppAddress = "ue_C["+string(ancestorIndex(1))+"]"
*.ue_D[*].app[1].deviceAppAddress = "ue_D["+string(ancestorIndex(1))+"]"
*.ue*[*].app[1].deviceAppPort = 4500

#*.ue_A[2].app[1].leaveTime = 11s
*.ue*[*].app[1].leaveTime = 45s
*.ue*[*].app[1].stopTime = 150s		
*.ue*[*].app[1].positionX = 800	
*.ue*[*].app[1].positionY = 600
#------------------------------------#

# Location services vary the service time. Cars of different operators will have
# position updates NOT synchronised
*.mecHost_A.mecPlatform.mecService[0].requestServiceTime = ${stA = 0.5}ms
*.mecHost_B.mecPlatform.mecService[0].requestServiceTime = ${stB = 30}ms
*.mecHost_C.mecPlatform.mecService[0].requestServiceTime = ${stC = 30}ms
*.mecHost_D.mecPlatform.mecService[0].requestServiceTime = ${stD = 30}ms


[Config MultiOperator_MultiMec_randomJoin]
extends = MultiOperator_MultiMec

*.ue_A[0].mobility.initialX = 310m
*.ue_B[0].mobility.initialX = 300m
*.ue_C[0].mobility.initialX = 290m
*.ue_D[0].mobility.initialX = 280m
*.ue_A[1].mobility.initialX = 270m
*.ue_B[1].mobility.initialX = 260m
*.ue_C[1].mobility.initialX = 250m
*.ue_D[1].mobility.initialX = 240m
*.ue_A[2].mobility.initialX = 230m
*.ue_B[2].mobility.initialX = 220m
*.ue_C[2].mobility.initialX = 210m
*.ue_D[2].mobility.initialX = 200m
*.ue_A[3].mobility.initialX = 190m
*.ue_B[3].mobility.initialX = 180m
*.ue_C[3].mobility.initialX = 170m
*.ue_D[3].mobility.initialX = 160m

# set startTime to force the correct order
*.ue_A[0].app[1].startTime = 1s
*.ue_B[0].app[1].startTime = 1.5s
*.ue_C[0].app[1].startTime = 2s
*.ue_D[0].app[1].startTime = 2.5s
*.ue_A[1].app[1].startTime = 3s 
*.ue_B[1].app[1].startTime = 3.2s 
*.ue_C[1].app[1].startTime = 3.4s 
*.ue_D[1].app[1].startTime = 3.6s 
*.ue_A[2].app[1].startTime = 3.8s 
*.ue_B[2].app[1].startTime = 4.0s 
*.ue_C[2].app[1].startTime = 4.2s 
*.ue_D[2].app[1].startTime = 4.4s 
*.ue_A[3].app[1].startTime = 4.6s 
*.ue_B[3].app[1].startTime = 4.8s 
*.ue_C[3].app[1].startTime = 5s 
*.ue_D[3].app[1].startTime = 5.2s 


[Config MultiOperator_MultiMec_sortedJoin]
extends = MultiOperator_MultiMec

*.ue_A[0].mobility.initialX = 310m
*.ue_A[1].mobility.initialX = 300m
*.ue_A[2].mobility.initialX = 290m
*.ue_A[3].mobility.initialX = 280m
*.ue_B[0].mobility.initialX = 270m
*.ue_B[1].mobility.initialX = 260m
*.ue_B[2].mobility.initialX = 250m
*.ue_B[3].mobility.initialX = 240m
*.ue_C[0].mobility.initialX = 230m
*.ue_C[1].mobility.initialX = 220m
*.ue_C[2].mobility.initialX = 210m
*.ue_C[3].mobility.initialX = 200m
*.ue_D[0].mobility.initialX = 190m
*.ue_D[1].mobility.initialX = 180m
*.ue_D[2].mobility.initialX = 170m
*.ue_D[3].mobility.initialX = 160m

# set startTime to force the correct order
*.ue_A[0].app[1].startTime = 1s   
*.ue_A[1].app[1].startTime = 1.5s 
*.ue_A[2].app[1].startTime = 2s   
*.ue_A[3].app[1].startTime = 2.5s 
*.ue_B[0].app[1].startTime = 3s    
*.ue_B[1].app[1].startTime = 3.2s  
*.ue_B[2].app[1].startTime = 3.4s  
*.ue_B[3].app[1].startTime = 3.6s  
*.ue_C[0].app[1].startTime = 3.8s  
*.ue_C[1].app[1].startTime = 4.0s  
*.ue_C[2].app[1].startTime = 4.2s  
*.ue_C[3].app[1].startTime = 4.4s  
*.ue_D[0].app[1].startTime = 4.6s  
*.ue_D[1].app[1].startTime = 4.8s  
*.ue_D[2].app[1].startTime = 5s    
*.ue_D[3].app[1].startTime = 5.2s  

# In this configuration Location services vary the service time. Cars of different operators will have
# position updates NOT synchronised but ADJUSTED by the MEC Controller App
[Config MultiOperator_MultiMec_sortedJoin_adjustment]
extends=MultiOperator_MultiMec_sortedJoin
**.adjustPosition = true

# In this configuration Location services vary the service time. Cars of different operators will have
# position updates NOT synchronised but ADJUSTED by the MEC Controller App
[Config MultiOperator_MultiMec_randomJoin_adjustment]
extends=MultiOperator_MultiMec_randomJoin
**.adjustPosition = true

## In this configuration Location services vary the service time. Cars of different operators will have
## position updates NOT synchronised. The platoon leader proceeds in a sinusoidal manner
#[Config MultiOperator_MultiMec_sortedJoin_sinusoidal]
#extends=MultiOperator_MultiMec_sortedJoin
#*.ue_A[0].app[1].sinusoidal = true
#
#
## In this configuration Location services vary the service time. Cars of different operators will have
## position updates NOT synchronised but ADJUSTED by the MEC Controller App
## The platoon leader proceeds in a sinusoidal manner
#[Config MultiOperator_MultiMec_sortedJoin_sinusoidal_adjustment]
#extends=MultiOperator_MultiMec_sortedJoin
#*.ue_A[0].app[1].sinusoidal = true
#**.adjustPosition = true
#
#
#
## In this configuration Location services vary the service time AND a delay bewteen the two MEC systems is present. 
## Cars of different operators will have position updates NOT synchronised
#[Config MultiOperator_MultiMec_propDelay_LoadLS]
#extends = MultiOperator_MultiMec
#repeat = 1
##*.mecHost_*.mecPlatform.mecService[0].requestServiceTime = ${st = 1, 5..30 step 5}ms
#*.mecHost_A.mecPlatform.mecService[0].requestServiceTime = ${stA = 0.5, 5, 10, 20, 30}ms
#*.mecHost_B.mecPlatform.mecService[0].requestServiceTime = ${stB = 0.5, 5, 10, 20, 30}ms
#*.mecHost_C.mecPlatform.mecService[0].requestServiceTime = ${stC = 0.5, 5, 10, 20, 30}ms
#*.mecHost_D.mecPlatform.mecService[0].requestServiceTime = ${stD = 0.5, 5, 10, 20, 30}ms
#*.linkLength = ${delay = 0, 1, 5, 10..50 step 10}m #is ms
#**.tcp.mss = 1452
#**.nagleEnabled = false
#
## In this configuration Location services vary the service time AND a delay bewteen the two MEC systems is present. 
## Cars of different operators will have position updates NOT synchronised but ADJUSTED by the MEC Controller App
#[Config MultiOperator_MultiMec_propDelay_LoadLS_adjustment]
#extends=MultiOperator_MultiMec_propDelay_LoadLS
#**.adjustPosition = true
#
## In this configuration Location services vary the service time AND a delay bewteen the two MEC systems is present. 
## Cars of different operators will have position updates NOT synchronised but ADJUSTED by the MEC Controller App
## The platoon leader proceeds in a sinusoidal manner
#[Config MultiOperator_MultiMec_propDelay_LoadLS_adj_sinusoidal]
#extends=MultiOperator_MultiMec_propDelay_LoadLS_adjustment
#*.ue_A[0].app[1].sinusoidal = true
#
## In this configuration Location services vary the service time AND a delay bewteen the two MEC systems is present. 
## Cars of different operators will have position updates NOT synchronised
## The platoon leader proceeds in a sinusoidal manner
#[Config MultiOperator_MultiMec_propDelay_LoadLS_sinusoidal]
#extends = MultiOperator_MultiMec_propDelay_LoadLS
#*.ue_A[0].app[1].sinusoidal = true

