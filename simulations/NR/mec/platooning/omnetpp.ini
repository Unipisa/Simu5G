[General]
image-path=../../../images
output-scalar-file-append = false
**.routingRecorder.enabled = false

############### Statistics ##################
output-scalar-file = ${resultdir}/${configname}/${iterationvars}-${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${iterationvars}-${repetition}.vec
seed-set = ${repetition}
num-rngs = 3
**.sctp.**.scalar-recording = false  # remove annoying statistics from SCTP
**.sctp.**.vector-recording = false  # remove annoying statistics from SCTP
**.vector-recording = false

############### SCTP configuration ##################
**.sctp.nagleEnabled = false         # if true, transmission of small packets will be delayed on the X2
**.sctp.enableHeartbeats = false

############### General PHY parameters ##############
**.downlink_interference = true
**.uplink_interference = true
**.ueTxPower = 26
**.eNodeBTxPower = 46
**.targetBler = 0.01
**.blerShift = 5  
**.fbPeriod = 40   # reports CQI every 40ms

############### IPv4 configurator config #################
*.configurator.config = xmldoc("./demo.xml")


# ------------------------------------------------------------------------ #
# Config MultiOperator
#
# General configuration for the multicell, multi-operator system
# Also see 'demo.xml' for the correct configuration of network interfaces 
#
[Config MultiOperator]
description = "Base configuration, do not run this config!"
sim-time-limit=40s
network = simu5g.simulations.NR.mec.platooning.MultiOperator

############# Floorplan parameters ################
**.mobility.constraintAreaMaxX = 1500m
**.mobility.constraintAreaMaxY = 750m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 250m
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = false

############### CA configuration ################# 
# we configure two carrier components: operator A uses CC 0, while operator B uses CC 1
*.carrierAggregation.numComponentCarriers = 2
*.carrierAggregation.componentCarrier[0].numerologyIndex = ${u=0}
*.carrierAggregation.componentCarrier[0].carrierFrequency = 2GHz
*.carrierAggregation.componentCarrier[0].numBands = ${numRbs=50}
*.carrierAggregation.componentCarrier[1].numerologyIndex = ${u}
*.carrierAggregation.componentCarrier[1].carrierFrequency = 4GHz
*.carrierAggregation.componentCarrier[1].numBands = ${numRbs}

*.gnb*.cellularNic.numCarriers = 1
*.ue_*[*].cellularNic.numCarriers = 1

*.gnb_A*.cellularNic.channelModel[0].componentCarrierIndex = 0
*.gnb_B*.cellularNic.channelModel[0].componentCarrierIndex = 1
*.ue_A[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 0
*.ue_B[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 1
**.cellularNic.LteChannelModelType = "NRChannelModel_3GPP38_901"

############### BS position #################
# operator A's and B's gNBs are co-located
*.gnb_*.mobility.initialY = 500m
*.gnb_*1.mobility.initialX = 250m
*.gnb_*2.mobility.initialX = 750m
*.gnb_*3.mobility.initialX = 1250m

############## BS gateway ##################
*.gnb_A*.gateway = "upf_A"
*.gnb_B*.gateway = "upf_B"

############### X2 configuration #################
*.gnb_*2.numX2Apps = 2                                        # one x2App per peering node
*.gnb*.numX2Apps = 1                                          # one x2App per peering node
*.gnb*.x2App[*].server.localPort = 5000 + ancestorIndex(1)  # Server ports (x2App[0]=5000, x2App[1]=5001, ...)
*.gnb_A1.x2App[0].client.connectAddress = "gnb_A2%x2ppp0" 
*.gnb_A2.x2App[0].client.connectAddress = "gnb_A1%x2ppp0" 
*.gnb_A2.x2App[1].client.connectAddress = "gnb_A3%x2ppp0" 
*.gnb_A3.x2App[0].client.connectAddress = "gnb_A2%x2ppp1" 
*.gnb_B1.x2App[0].client.connectAddress = "gnb_B2%x2ppp0" 
*.gnb_B2.x2App[0].client.connectAddress = "gnb_B1%x2ppp0" 
*.gnb_B2.x2App[1].client.connectAddress = "gnb_B3%x2ppp0" 
*.gnb_B3.x2App[0].client.connectAddress = "gnb_B2%x2ppp1" 

############## UE configuration ##################
*.numUe_A = 3
*.numUe_B = 2

# UEs associates to the best BS at the beginning of the simulation
*.ue*[*].macCellId = 0
*.ue*[*].masterId = 0
*.ue_A[*].nrMacCellId = 1
*.ue_A[*].nrMasterId = 1
*.ue_B[*].nrMacCellId = 4
*.ue_B[*].nrMasterId = 4
**.dynamicCellAssociation = true
**.enableHandover = true

############ UEs position #################
*.ue*[*].mobilityType = "LinearAccelerationMobility"
*.ue_A[0].mobility.initialX = 450m
*.ue_A[1].mobility.initialX = 300m
*.ue_A[2].mobility.initialX = 260m
*.ue_B[0].mobility.initialX = 400m
*.ue_B[1].mobility.initialX = 340m
*.ue*[*].mobility.initialY = 600m
*.ue*[*].mobility.speed = 13.89mps
*.ue*[*].mobility.initialMovementHeading = 0deg



############ MEC Configuration ############
**.hasRNISupport = false

# tcp settings
**.tcp.typename = "Tcp"
**.tcp.advertisedWindow = 65535         # in bytes, corresponds with the maximal receiver buffer capacity (Note: normally, NIC queues should be at least this size)
**.tcp.tcpAlgorithmClass = "TcpReno"    # TcpReno/TcpTahoe/TcpNewReno/TcpNoCongestionControl/DumbTcp
**.tcp.sackSupport = true               # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)

# MEC Hosts
**.mecHost*.virtualisationInfrastructure.ipv4.forwarding = true
*.mecHost*.maxMECApps = 100					# max ME Apps to instantiate
*.mecHost*.maxRam = 32GB					# max KBytes of Ram 
*.mecHost*.maxDisk = 100TB					# max KBytes of Disk Space 
*.mecHost*.maxCpuSpeed = 400000		    	# max CPU
*.mecHost_A*.gateway = "upf_A"
*.mecHost_B*.gateway = "upf_B"

# MEC Services
# MEC host 1 services configurations
*.mecHost*.mecPlatform.numMecServices = 1
*.mecHost*.mecPlatform.mecService[0].typename = "LocationService"
*.mecHost_A.mecPlatform.mecService[0].localAddress = "mecHost_A.mecPlatform"
*.mecHost_B.mecPlatform.mecService[0].localAddress = "mecHost_B.mecPlatform"
*.mecHost*.mecPlatform.mecService[0].localPort = 10020
*.mecHost_A.mecPlatform.serviceRegistry.localAddress = "mecHost_A.mecPlatform"
*.mecHost_B.mecPlatform.serviceRegistry.localAddress = "mecHost_B.mecPlatform"
*.mecHost*.mecPlatform.serviceRegistry.localPort = 10021

# random number generators configuration
*.mecHost*.mecPlatform.serviceRegistry.rng-0 = 0 # request service time
*.mecHost*.mecPlatform.serviceRegistry.rng-1 = 1 # subscription service time
*.mecHost*.mecPlatform.mecService[0].rng-0 = 0 # request service time
*.mecHost*.mecPlatform.mecService[0].rng-1 = 1 # subscription service time
*.mecHost*.mecPlatform.mecService[0].requestServiceTime = 20us
*.mecHost*.mecPlatform.mecService[0].subscriptionServiceTime = 11us

# MEC Orchestrator & UALCMP configuration
*.mecOrchestrator_A.mecHostList = "mecHost_A"              # MEC hosts associated to the MEC system
*.mecOrchestrator_B.mecHostList = "mecHost_B"              # MEC hosts associated to the MEC system
*.mecOrchestrator*.mecApplicationPackageList = "PlatooningConsumerApp"   # List of MEC app descriptors to be onboarded at 
*.mecHost_A.mecPlatformManager.mecOrchestrator = "mecOrchestrator_A" # the MECPM needs to know the MEC orchestrator
*.mecHost_B.mecPlatformManager.mecOrchestrator = "mecOrchestrator_B" # the MECPM needs to know the MEC orchestrator
*.ualcmp_A.mecOrchestratorHostname = "mecOrchestrator_A"
*.ualcmp_B.mecOrchestratorHostname = "mecOrchestrator_B"
*.ualcmp_A.gateway = "upf_A"
*.ualcmp_B.gateway = "upf_B"


# MEC Platooning Provider App
**.numBGMecApp = 1
*.mecHost_*.bgApp[0].typename = "MECPlatooningProducerApp"
*.mecHost_*.bgApp[0].platooningConsumerAppsPort = 5500
*.mecHost_*.bgApp[0].platooningProducerAppsPort = 8500
*.mecHost_A.bgApp[0].producerAppId = 0
*.mecHost_B.bgApp[0].producerAppId = 1


*.mecHost_*.bgApp[0].mecAppId = 5500
*.mecHost_A.bgApp[*].mp1Address= "mecHost_A.mecPlatform"
*.mecHost_B.bgApp[*].mp1Address= "mecHost_B.mecPlatform"
*.mecHost_*.bgApp[*].mp1Port = 10021

**.bgApp[0].requiredRam = 10MB
**.bgApp[0].requiredDisk = 10MB
**.bgApp[0].requiredCpu = 0.01


# ----------------------------------------------------------------------------------------------------- #
# MultiOperator_MultiMec
#
# In this configuration, UEs connected to operator A's network communicate with operator A's MEC Host, 
#  whereas UEs connected to operator B's network communicate with operator B's MEC host
#
[Config MultiOperator_MultiMec]
extends=MultiOperator

*.enableMecOperatorB = true

# MEC host A handles operator A's gNBs
# MEC host B handles operator B's gNBs
*.mecHost_A*.eNBList = "gnb_A1, gnb_A2, gnb_A3"
*.mecHost_B*.eNBList = "gnb_B1, gnb_B2, gnb_B3"

*.mecHost_A.bgApp[0].federatedProducerApps = [{id : 1, address: "mecHost_B.virtualisationInfrastructure", port: 8500, \
											   locationServiceAddress: "mecHost_B.mecPlatform", locationServicePort: 10020}]
*.mecHost_B.bgApp[0].federatedProducerApps = [{id : 0, address: "mecHost_A.virtualisationInfrastructure", port: 8500, \
											   locationServiceAddress: "mecHost_A.mecPlatform", locationServicePort: 10020}]

#------------UEWarningAlertApp---------------
*.ue*[*].numApps = 2
*.ue*[*].app[0].typename = "DeviceApp"
*.ue*[*].app[0].localPort = 4500
*.ue_A[*].app[0].UALCMPAddress = "ualcmp_A"
*.ue_B[*].app[0].UALCMPAddress = "ualcmp_B"
*.ue*[*].app[0].UALCMPPort = 1000
#*.ue*[*].app[0].appPackageSource = "ApplicationDescriptors/WarningAlertApp.json"

*.ue*[*].app[1].typename = "UEPlatooningApp"
*.ue_A[*].app[1].deviceAppAddress = "ue_A["+string(ancestorIndex(1))+"]"
*.ue_B[*].app[1].deviceAppAddress = "ue_B["+string(ancestorIndex(1))+"]"
*.ue*[*].app[1].deviceAppPort = 4500
*.ue_A[*].app[1].startTime = 1s
*.ue_B[*].app[1].startTime = 3s
*.ue_*[*].app[1].controllerIndex = 4 # for debug
												
*.ue*[*].app[1].stopTime = 35s		
*.ue*[*].app[1].positionX = 600	
*.ue*[*].app[1].positionY = 600
#------------------------------------#



# ----------------------------------------------------------------------------------------------------- #
# MultiOperator_SingleMec
#
# In this configuration, UEs connected to operator A's network AND UEs connected to operator B's network  
# communicate with operator A's MEC Host
#
[Config MultiOperator_SingleMec]
extends=MultiOperator

*.enableMecOperatorB = false

# MEC host A handles operator A's and operator B's gNBs
*.mecHost_A*.eNBList = "gnb_A1, gnb_A2, gnb_A3, gnb_B1, gnb_B2, gnb_B3"

#------------UEWarningAlertApp---------------
*.ue*[*].numApps = 2
*.ue*[*].app[0].typename = "DeviceApp"
*.ue*[*].app[0].localPort = 4500
*.ue*[*].app[0].UALCMPAddress = "ualcmp_A"
*.ue*[*].app[0].UALCMPPort = 1000
#*.ue*[*].app[0].appPackageSource = "ApplicationDescriptors/WarningAlertApp.json"

*.ue*[*].app[1].typename = "UEPlatooningApp"
*.ue_A[*].app[1].deviceAppAddress = "ue_A["+string(ancestorIndex(1))+"]"
*.ue_B[*].app[1].deviceAppAddress = "ue_B["+string(ancestorIndex(1))+"]"
*.ue*[*].app[1].deviceAppPort = 4500
*.ue*[*].app[1].controllerIndex = 0
*.ue*[*].app[1].startTime = uniform(0.5s,1s)	
*.ue*[*].app[1].joinTime = uniform(1s,2s)
*.ue*[*].app[1].leaveTime = uniform(30s,31s)				
*.ue*[*].app[1].stopTime = uniform(35s,36s)

#------------------------------------#



