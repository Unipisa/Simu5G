[General]
image-path=../../../images
output-scalar-file-append = false
sim-time-limit=20s
**.routingRecorder.enabled = false

############### Statistics ##################
seed-set = ${repetition}
**.sctp.**.scalar-recording = false  # remove annoying statistics from SCTP
**.sctp.**.vector-recording = false  # remove annoying statistics from SCTP
**.vector-recording = true
output-scalar-file = ${resultdir}/${configname}/${iterationvars}-${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${iterationvars}-${repetition}.vec

################ Mobility parameters #####################
# *
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = false

############### Transmission Power ##################
**.eNodeBTxPower = 40dBm

############### SCTP configuration ##################
**.sctp.nagleEnabled = false         # if true, transmission of small packets will be delayed on the X2
**.sctp.enableHeartbeats = false

############### General PHY parameters ##############
**.downlink_interference = true
**.uplink_interference = true
**.enableHandover = true
**.fbPeriod = 12tti   # reports CQI every 10ms
**.targetBler = 0.01
**.blerShift = 5

############### IPv4 configurator config #################
*.configurator.config = xmldoc("./demo.xml")



#------------------------------------#
# Config SingleCell
#
# Use "runnable" configurations for testing (see below)
#
[Config SingleCell]
network = simu5g.simulations.NR.networks.SingleCell_withSecondaryGnb
sim-time-limit=10s

########### Carrier Aggregation configuration ###############
*.carrierAggregation.numComponentCarriers = 2
*.carrierAggregation.componentCarrier[0].numerologyIndex = 0
*.carrierAggregation.componentCarrier[0].carrierFrequency = 2GHz
*.carrierAggregation.componentCarrier[0].numBands = 6
*.carrierAggregation.componentCarrier[1].numerologyIndex = ${u=0,1,2,3,4}
*.carrierAggregation.componentCarrier[1].carrierFrequency = 6GHz
*.carrierAggregation.componentCarrier[1].numBands = 6

# Set carriers
*.masterEnb.cellularNic.numCarriers = 1
*.masterEnb.cellularNic.channelModel[0].componentCarrierIndex = 0
*.secondaryGnb.cellularNic.numCarriers = 1
*.secondaryGnb.cellularNic.channelModel[0].componentCarrierIndex = 1

*.ue[*].cellularNic.numCarriers = 1
*.ue[*].cellularNic.numNRCarriers = 1
*.ue[*].cellularNic.channelModel[0].componentCarrierIndex = 0
*.ue[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 1



############### e/gNodeB configuration #################
*.masterEnb.mobility.initialX = 300m
*.masterEnb.mobility.initialY = 300m
*.secondaryGnb.mobility.initialX = 600m
*.secondaryGnb.mobility.initialY = 300m

# the LTE eNodeB must instantiate the NR PDCP layer to exploit Dual Connectivity
# the NR gNodeB comes with NR PDCP layer by default
*.masterEnb.nicType = "LteNicEnbD2D"
*.masterEnb.cellularNic.LtePdcpRrcType = "NRPdcpRrcEnb"
*.secondaryGnb.masterId = 1
**.dualConnectivityEnabled = true

############### X2 configuration #################
*.*nb.numX2Apps = 1    # one x2App per peering node
*.*nb.x2App[*].server.localPort = 5000 + ancestorIndex(1) # Server ports (x2App[0]=5000, x2App[1]=5001, ...)
*.masterEnb.x2App[0].client.connectAddress = "secondaryGnb%x2ppp0"
*.secondaryGnb.x2App[0].client.connectAddress = "masterEnb%x2ppp0"

############## UE configuration ##################
*.numUe = ${numUe=10}

# connect the UE's NIC to the corresponding serving eNB
*.ue[*].macCellId = 1
*.ue[*].masterId = 1
*.ue[*].nrMacCellId = 2
*.ue[*].nrMasterId = 2

# UE mobility
**.mobility.constraintAreaMaxX = 700m
**.mobility.constraintAreaMaxY = 400m
**.mobility.constraintAreaMinX = 200m
**.mobility.constraintAreaMinY = 200m

*.ue[*].mobility.typename = "RandomWaypointMobility"
*.ue[*].mobility.initialX = uniform(200m,700m)
*.ue[*].mobility.initialY = uniform(200m,400m)
*.ue[*].mobility.speed = uniform(5mps,15mps)

# one UDP application for each user
*.ue[*].numApps = ${numUeApps=2}

# the amount of UDP applications on server should be equal to (numUEs)*(ue[*].numApps)
*.server.numApps = ${numUe}*${numUeApps}

#------------------------------------#








#------------------------------------#
# Multiple cell scenario
#
# Use "runnable" configurations for testing (see below)
#
[Config MultiCell]
network = simu5g.simulations.NR.networks.MultiCell_withSecondaryGnb
sim-time-limit=50s

########### Carrier Aggregation configuration ###############
*.carrierAggregation.numComponentCarriers = 2
*.carrierAggregation.componentCarrier[0].numerologyIndex = 0
*.carrierAggregation.componentCarrier[0].carrierFrequency = 2GHz
*.carrierAggregation.componentCarrier[0].numBands = 6
*.carrierAggregation.componentCarrier[1].numerologyIndex = ${u=0,1,2,3,4}
*.carrierAggregation.componentCarrier[1].carrierFrequency = 6GHz
*.carrierAggregation.componentCarrier[1].numBands = 6

# Set carriers
*.masterEnb*.cellularNic.numCarriers = 1
*.masterEnb*.cellularNic.channelModel[0].componentCarrierIndex = 0
*.secondaryGnb*.cellularNic.numCarriers = 1
*.secondaryGnb*.cellularNic.channelModel[0].componentCarrierIndex = 1

*.ue[*].cellularNic.numCarriers = 1
*.ue[*].cellularNic.numNRCarriers = 1
*.ue[*].cellularNic.channelModel[0].componentCarrierIndex = 0
*.ue[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 1

############### e/gNodeB configuration #################
*.masterEnb1.mobility.initialX = 300m
*.masterEnb1.mobility.initialY = 300m
*.masterEnb2.mobility.initialX = 800m
*.masterEnb2.mobility.initialY = 300m
*.secondaryGnb1.mobility.initialX = 300m
*.secondaryGnb1.mobility.initialY = 600m
*.secondaryGnb2.mobility.initialX = 800m
*.secondaryGnb2.mobility.initialY = 600m

# the LTE eNodeB must instantiate the NR PDCP layer to exploit Dual Connectivity
# the NR gNodeB comes with NR PDCP layer by default
*.masterEnb*.nicType = "LteNicEnbD2D"
*.masterEnb*.cellularNic.LtePdcpRrcType = "NRPdcpRrcEnb"
*.secondaryGnb1.masterId = 1
*.secondaryGnb2.masterId = 3
**.dualConnectivityEnabled = true

############### X2 configuration #################
*.masterEnb*.numX2Apps = 2    # one x2App per peering node
*.secondaryGnb*.numX2Apps = 1    # one x2App per peering node
*.*nb*.x2App[*].server.localPort = 5000 + ancestorIndex(1) # Server ports (x2App[0]=5000, x2App[1]=5001, ...)
*.secondaryGnb1.x2App[0].client.connectAddress = "masterEnb1%x2ppp0"
*.masterEnb1.x2App[0].client.connectAddress = "secondaryGnb1%x2ppp0"
*.masterEnb1.x2App[1].client.connectAddress = "masterEnb2%x2ppp1"
*.masterEnb2.x2App[0].client.connectAddress = "masterEnb1%x2ppp1"
*.masterEnb2.x2App[1].client.connectAddress = "secondaryGnb2%x2ppp0"
*.secondaryGnb2.x2App[0].client.connectAddress = "masterEnb2%x2ppp0"

############## UE configuration ##################
*.numUe = ${numUe=10}

# connect the UE's NIC to the corresponding serving eNB
*.ue[*].macCellId = 1
*.ue[*].masterId = 1
*.ue[*].nrMacCellId = 2
*.ue[*].nrMasterId = 2

#**.dynamicCellAssociation = true

# UE mobility
**.mobility.constraintAreaMaxX = 1100m
**.mobility.constraintAreaMaxY = 600m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 300m

*.ue[*].mobility.typename = "RandomWaypointMobility"
*.ue[*].mobility.initialX = uniform(0m,1100m)
*.ue[*].mobility.initialY = uniform(300m,600m)
*.ue[*].mobility.speed = uniform(5mps,15mps)

# one UDP application for each user
*.ue[*].numApps = ${numUeApps=2}

# the amount of UDP applications on server should be equal to (numUEs)*(ue[*].numApps)
*.server.numApps = ${numUe}*${numUeApps}

#------------------------------------#





#------------------------------------#
# General configuration for CBR DL traffic
#
# Use "runnable" configurations for testing (see below)
#
[Config CBR-DL]

#============= Application Setup =============
*.ue[*].app[*].typename = "CbrReceiver"
*.ue[*].app[0].localPort = 1000
*.ue[*].app[1].localPort = 10000

*.server.app[*].sampling_time = 0.02s
*.server.app[0..9].destAddress = "ue["+string(ancestorIndex(0))+"]" # obtain the address of the client by reading its index in the array of udp Apps
*.server.app[10..19].destAddress = "ue["+string(ancestorIndex(0)-10)+"]" # obtain the address of the client by reading its index in the array of udp Apps
*.server.app[0..9].destPort = 1000
*.server.app[10..19].destPort = 10000
*.server.app[0..9].tos = 0
*.server.app[10..19].tos = 10
*.server.app[*].localPort = 3088+ancestorIndex(0)
*.server.app[*].typename = "CbrSender"
*.server.app[*].startTime = uniform(0.01s,0.02s)
#------------------------------------#


#------------------------------------#
# General configuration for CBR UL traffic
#
# Use "runnable" configurations for testing (see below)
#
[Config CBR-UL]

#============= Application Setup =============
*.server.app[*].typename = "CbrReceiver"
*.server.app[0..9].localPort = 1000+ancestorIndex(0)
*.server.app[10..19].localPort = 10000+ancestorIndex(0)-10

# obtain the address of the client by reading its index in the array of udp Apps
*.ue[*].app[*].destAddress = "server"
*.ue[*].app[*].localPort = 3088+ancestorIndex(0)
*.ue[*].app[0].destPort = 1000+ancestorIndex(1)
*.ue[*].app[1].destPort = 10000+ancestorIndex(1)
*.ue[*].app[0].tos = 0
*.ue[*].app[1].tos = 10
*.ue[*].app[*].typename = "CbrSender"
*.ue[*].app[*].startTime = uniform(0s,0.02s)

#------------------------------------#





###########################
# RUNNABLE CONFIGURATIONS #
###########################
[Config SingleCell-CBR-DL]
extends=SingleCell, CBR-DL


[Config SingleCell-CBR-UL]
extends=SingleCell, CBR-UL


[Config MultiCell-CBR-DL]
extends=MultiCell, CBR-DL


[Config MultiCell-CBR-UL]
extends=MultiCell, CBR-UL
