[General]
image-path=../../../images
output-scalar-file-append = false
sim-time-limit=20s
warmup-period=1s
**.routingRecorder.enabled = false

############### Statistics ##################
seed-set = ${repetition}
**.sctp.**.scalar-recording = false  # remove annoying statistics from SCTP
**.sctp.**.vector-recording = false  # remove annoying statistics from SCTP
**.vector-recording = true

################ Mobility parameters #####################
# *
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = false

############### Transmission Power ##################
**.eNodeBTxPower = 40dBm

############### SCTP configuration ##################
**.sctp.nagleEnabled = false         # if true, transmission of small packets will be delayed on the X2
**.sctp.enableHeartbeats = false

############### General PHY parameters ##############
**.downlink_interference = true
**.uplink_interference = true
**.enableHandover = true
**.fbPeriod = 10tti   # reports CQI every 10ms

**.amcType = "NRAmc"
**.pilotMode = "ROBUST_CQI"
**.targetBler = 0.01
**.blerShift = 5

############### IPv4 configurator config #################
*.configurator.config = xmldoc("./demo.xml")


#------------------------------------#
# Config TestTdd
#
# This configuration compares two scenarios where FDD and TDD is used, respectively
#
[Config TestTdd]
network = simu5g.simulations.NR.networks.SingleCell_withSecondaryGnb

############### CA configuration ########################
*.carrierAggregation.numComponentCarriers = 1
*.carrierAggregation.componentCarrier[0].numerologyIndex = 0
*.carrierAggregation.componentCarrier[0].carrierFrequency = 2GHz
*.carrierAggregation.componentCarrier[0].numBands = 6
*.carrierAggregation.componentCarrier[0].useTdd = ${useTdd=false,true}


############### e/gNodeB configuration #################
*.masterEnb.mobility.initialX = 300m
*.masterEnb.mobility.initialY = 300m
*.secondaryGnb.mobility.initialX = 600m
*.secondaryGnb.mobility.initialY = 300m

# the LTE eNodeB must instantiate the NR PDCP layer to exploit Dual Connectivity
# the NR gNodeB comes with NR PDCP layer by default
*.masterEnb.nicType = "LteNicEnbD2D"
*.masterEnb.cellularNic.LtePdcpRrcType = "NRPdcpRrcEnb"
*.secondaryGnb.masterId = 1
**.dualConnectivityEnabled = true

############### X2 configuration #################
*.*nb.numX2Apps = 1    # one x2App per peering node
*.*nb.x2App[*].server.localPort = 5000 + ancestorIndex(1) # Server ports (x2App[0]=5000, x2App[1]=5001, ...)
*.masterEnb.x2App[0].client.connectAddress = "secondaryGnb%x2ppp0"
*.secondaryGnb.x2App[0].client.connectAddress = "masterEnb%x2ppp0"

############## UE configuration ##################
*.numUe = ${numUE=1}

# connect the UE's NIC to the corresponding serving eNB
*.ue[*].macCellId = 1
*.ue[*].masterId = 1
*.ue[*].nrMacCellId = 2
*.ue[*].nrMasterId = 2

# UE mobility
**.mobility.constraintAreaMaxX = 700m
**.mobility.constraintAreaMaxY = 400m
**.mobility.constraintAreaMinX = 200m
**.mobility.constraintAreaMinY = 200m

*.ue[*].mobility.typename = "StationaryMobility"
*.ue[*].mobility.initialX = 600m
*.ue[*].mobility.initialY = 350m



#============= Application Setup =============
# one UDP application for each user
*.ue[*].numApps = 1
*.server.numApps = ${numUE}

*.ue[*].app[*].typename = "CbrReceiver"
*.ue[*].app[0].localPort = 10000

*.server.app[*].PacketSize = 3000B
*.server.app[*].sampling_time = 0.001s
*.server.app[*].destAddress = "ue["+string(ancestorIndex(0))+"]" # obtain the address of the client by reading its index in the array of udp Apps
*.server.app[*].destPort = 10000
*.server.app[*].tos = 10
*.server.app[*].localPort = 3088+ancestorIndex(0)
*.server.app[*].typename = "CbrSender"
*.server.app[*].startTime = 0.02s

output-scalar-file = ${resultdir}/${configname}/useTdd=${useTdd}-${repetition}.sca
output-vector-file = ${resultdir}/${configname}/useTdd=${useTdd}-${repetition}.vec

