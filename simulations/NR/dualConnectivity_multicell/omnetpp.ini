[General]
image-path=../../../images
output-scalar-file-append = false
sim-time-limit=40s
warmup-period=1s
seed-set = ${repetition}

debug-on-errors = false

############### Statistics ##################
output-scalar-file = ${resultdir}/${configname}/${iterationvars}-${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${iterationvars}-${repetition}.vec

**.vector-recording = true
**.sctp.**.scalar-recording = false  # remove annoying statistics from SCTP
**.sctp.**.vector-recording = false  # remove annoying statistics from SCTP
**.routingRecorder.enabled = false

############ Floorplan definition #################
**.mobility.constraintAreaMaxX = 1000m
**.mobility.constraintAreaMaxY = 700m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = false

############### IPv4 configurator config #################
*.configurator.config = xmldoc("./demo.xml")

############### SCTP configuration ##################
**.sctp.nagleEnabled = false         # if true, transmission of small packets will be delayed on the X2
**.sctp.enableHeartbeats = false

**.fading = false
**.shadowing = false
**.targetBler = 0.01
**.blerShift = 5


#------------------------------------#
# Config DualConnectivity
#
# Topology configuration for the exemplary scenario for Dual Connectivity
#
[Config DualConnectivity]
network = simu5g.simulations.NR.networks.MultiCell_withSecondaryGnb
description = "Base configuration, do not run this config!"

############### e/gNodeB configuration #################
*.masterEnb1.mobility.initialX = 300m
*.masterEnb1.mobility.initialY = 300m
*.secondaryGnb1.mobility.initialX = 500m
*.secondaryGnb1.mobility.initialY = 400m

*.masterEnb2.mobility.initialX = 700m
*.masterEnb2.mobility.initialY = 300m
*.secondaryGnb2.mobility.initialX = 800m
*.secondaryGnb2.mobility.initialY = 400m

# the LTE eNodeB must instantiate the NR PDCP layer to exploit Dual Connectivity
# the NR gNodeB comes with NR PDCP layer by default
*.masterEnb*.nicType = "LteNicEnbD2D"
*.masterEnb*.cellularNic.LtePdcpRrcType = "NRPdcpRrcEnb"
*.secondaryGnb1.masterId = 1
*.secondaryGnb2.masterId = 3
**.dualConnectivityEnabled = true

# PHY layer configuration
**.downlink_interference = true
**.uplink_interference = true
*.masterEnb*.cellularNic.phy.eNodeBTxPower = 40dBm
*.secondaryGnb*.cellularNic.phy.eNodeBTxPower = 20dBm
**.minRssi = 1dB

############### CA configuration ########################
*.carrierAggregation.numComponentCarriers = 2
*.carrierAggregation.componentCarrier[0].carrierFrequency = 2GHz
*.carrierAggregation.componentCarrier[0].numBands = 50
*.carrierAggregation.componentCarrier[0].numerologyIndex = 0
*.carrierAggregation.componentCarrier[1].carrierFrequency = 4GHz
*.carrierAggregation.componentCarrier[1].numBands = 50
*.carrierAggregation.componentCarrier[1].numerologyIndex = 0

*.masterEnb*.cellularNic.numCarriers = 1
*.masterEnb*.cellularNic.channelModel[0].componentCarrierIndex = 0
*.secondaryGnb*.cellularNic.numCarriers = 1
*.secondaryGnb*.cellularNic.channelModel[0].componentCarrierIndex = 1

*.ue[*].cellularNic.numCarriers = 1
*.ue[*].cellularNic.numNRCarriers = 1
*.ue[*].cellularNic.channelModel[0].componentCarrierIndex = 0
*.ue[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 1


############### X2 configuration #################
*.masterEnb*.numX2Apps = 2    # one x2App per peering node
*.secondaryGnb*.numX2Apps = 1    # one x2App per peering node
*.*.x2App[*].server.localPort = 5000 + ancestorIndex(1) # Server ports (x2App[0]=5000, x2App[1]=5001, ...)

# Dual connectivity connections
*.masterEnb1.x2App[0].client.connectAddress = "secondaryGnb1%x2ppp0"
*.masterEnb2.x2App[0].client.connectAddress = "secondaryGnb2%x2ppp0"
*.secondaryGnb1.x2App[0].client.connectAddress = "masterEnb1%x2ppp0"
*.secondaryGnb2.x2App[0].client.connectAddress = "masterEnb2%x2ppp0"

# inter-master nodes connections
*.masterEnb1.x2App[1].client.connectAddress = "masterEnb2%x2ppp1"
*.masterEnb2.x2App[1].client.connectAddress = "masterEnb1%x2ppp1"

############## UE configuration ##################
*.numUe = 1

# during the initalization phase, the UE chooses the base station with the largest RSRP
**.dynamicCellAssociation = true
**.enableHandover = true

# connect the UE's NIC to the corresponding serving eNB/gNB
# NOTE: these parameters are ignored when dynamicCellAssociation=true
*.ue[*].macCellId = 1
*.ue[*].masterId = 1
*.ue[*].nrMacCellId = 2
*.ue[*].nrMasterId = 2


# UE position
*.ue[*].mobility.typename = "LinearMobility"
*.ue[*].mobility.initialX = 300m
*.ue[*].mobility.initialY = 350m
*.ue[*].mobility.speed = 13.9mps  # 50 Km/h
*.ue[*].mobility.initialMovementHeading = 0deg

#------------------------------------#




###########################
# Runnable configurations #
###########################

# In the current version, the Ip2Nic module of the master eNB (the UE) selects which path
# to follow based on the Type of Service (TOS) field:
# - use master eNB if tos < 10
# - use secondary gNB if 10 <= tos < 20
# - use split bearer if tos >= 20
#
# To change the policy, change the implementation of the Ip2Nic::markPacket() function


#------------------------------------#
# Config SingleConnection-CBR-DL
#
# In this configuration, the UE has one downlink connection, which goes through the
# secondary gNB. If the secondary gNB is out of range, then the data flow goes
# through the LTE master eNB
[Config SingleConnection-CBR-DL]
extends = DualConnectivity
description = "one CBR downlink connection - if gNB out of range, use eNB"

# one UDP application for each user
*.ue[*].numApps = 1

# the amount of UDP applications on server should be equal to (numUEs)*(ue[*].numApps)
*.server.numApps = 1

#============= Application Setup =============
*.ue[*].app[*].typename = "CbrReceiver"
*.ue[*].app[*].localPort = 3000

*.server.app[*].typename = "CbrSender"
*.server.app[*].destAddress = "ue[" + string(ancestorIndex(0)) + "]" # obtain the address of the client by reading its index in the array of apps
*.server.app[*].localPort = 3088+ancestorIndex(0)
*.server.app[*].destPort = 3000
*.server.app[*].PacketSize = 1000B
*.server.app[*].sampling_time = 0.05s
*.server.app[*].startTime = uniform(0.02s, 0.05s)
*.server.app[*].finishTime = 39.9s
*.server.app[*].tos = 10
#------------------------------------#




#------------------------------------#
# Config SingleConnection-CBR-UL
#
# In this configuration, the UE has one uplink connection, which goes through the
# secondary gNB. If the secondary gNB is out of range, then the data flow goes
# through the LTE master eNB
[Config SingleConnection-CBR-UL]
extends = DualConnectivity
description = "one CBR uplink connection - if gNB out of range, use eNB"

# one UDP application for each user
*.ue[*].numApps = 1

# the amount of UDP applications on server should be equal to (numUEs)*(ue[*].numApps)
*.server.numApps = 1

#============= Application Setup =============
*.server.app[*].typename = "CbrReceiver"
*.server.app[*].localPort = 3000

*.ue[*].app[*].typename = "CbrSender"
*.ue[*].app[*].destAddress = "server"
*.ue[*].app[*].PacketSize = 1000B
*.ue[*].app[*].sampling_time = 0.05s
*.ue[*].app[*].localPort = 3088
*.ue[*].app[*].destPort = 3000
*.ue[*].app[*].startTime = uniform(0.02s, 0.05s)
*.ue[*].app[*].finishTime = 39.9s
*.ue[*].app[*].tos = 10
#------------------------------------#

#------------------------------------#
# Config DoubleConnection-CBR-DL
#
# In this configuration, the UE has TWO independent DL connections, one
# going through the LTE eNodeB, the other one through the gNodeB
[Config DoubleConnection-CBR-DL]
extends = DualConnectivity
description = "two CBR downlink connections - one via eNodeB, one via gNodeB"

# one UDP application for each user
*.ue[*].numApps = 2

# the amount of UDP applications on server should be equal to (numUEs)*(ue[*].numApps)
*.server.numApps = 2

#============= Applications Setup =============
*.ue[*].app[*].typename = "CbrReceiver"
*.ue[*].app[*].localPort = 3000+ancestorIndex(0)

*.server.app[*].typename = "CbrSender"
*.server.app[*].destAddress = "ue[0]" # obtain the address of the client by reading its index in the array of apps
*.server.app[*].localPort = 3088+ancestorIndex(0)
*.server.app[*].destPort = 3000+ancestorIndex(0)
*.server.app[*].PacketSize = 1000B
*.server.app[*].sampling_time = 0.05s
*.server.app[*].startTime = uniform(0.02s, 0.05s)
*.server.app[*].finishTime = 39.9s
*.server.app[0].tos = -1
*.server.app[1].tos = 10
#------------------------------------#


#------------------------------------#
# Config DoubleConnection-CBR-UL
#
# In this configuration, the UE has TWO independent UL connections, one
# going through the LTE eNodeB, the other one through the gNodeB
[Config DoubleConnection-CBR-UL]
extends = DualConnectivity
description = "two CBR uplink connections - one via eNodeB, one via gNodeB"

# one UDP application for each user
*.ue[*].numApps = 2

# the amount of UDP applications on server should be equal to (numUEs)*(ue[*].numApps)
*.server.numApps = 2

#============= Application Setup =============
*.server.app[*].typename = "CbrReceiver"
*.server.app[*].localPort = 3000+ancestorIndex(0)

*.ue[*].app[*].typename = "CbrSender"
*.ue[*].app[*].destAddress = "server"
*.ue[*].app[*].PacketSize = 1000B
*.ue[*].app[*].sampling_time = 0.05s
*.ue[*].app[*].localPort = 3088+ancestorIndex(0)
*.ue[*].app[*].destPort = 3000+ancestorIndex(0)
*.ue[*].app[*].startTime = uniform(0.02s, 0.05s)
*.ue[*].app[*].finishTime = 39.9s
*.ue[*].app[0].tos = -1
*.ue[*].app[1].tos = 10
#------------------------------------#


#------------------------------------#
# Config SplitBearer-CBR-DL
#
# In this configuration, the UE has one DL connection, exploiting Split Bearer feature,
# hence some packets go through the secondary gNB, some packets go through the master eNB
[Config SplitBearer-CBR-DL]
extends = DualConnectivity
description = "one CBR downlink, split bearer"

# one UDP application for each user
*.ue[*].numApps = 1

# the amount of UDP applications on server should be equal to (numUEs)*(ue[*].numApps)
*.server.numApps = 1

#============= Application Setup =============
*.ue[*].app[*].typename = "CbrReceiver"
*.ue[*].app[*].localPort = 3000

*.server.app[*].typename = "CbrSender"
*.server.app[*].destAddress = "ue[" + string(ancestorIndex(0)) + "]" # obtain the address of the client by reading its index in the array of apps
*.server.app[*].localPort = 3088+ancestorIndex(0)
*.server.app[*].destPort = 3000
*.server.app[*].PacketSize = 1000B
*.server.app[*].sampling_time = 0.05s
*.server.app[*].startTime = uniform(0.02s, 0.05s)
*.server.app[*].finishTime = 39.9s
*.server.app[*].tos = 20
#------------------------------------#


