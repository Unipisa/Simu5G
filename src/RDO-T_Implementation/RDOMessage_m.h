//
// Generated file, do not edit! Created by opp_msgtool 6.0 from rdoexperiment/src/RDOMessage.msg.
//

#ifndef __INET_RDOMESSAGE_M_H
#define __INET_RDOMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace inet {

class RDOPacket;
class RDOStatePacket;
class RDOGradientPacket;

}  // namespace inet

// cplusplus {{
#include "inet/common/INETDefs.h"
// }}


namespace inet {

/**
 * Class generated from <tt>rdoexperiment/src/RDOMessage.msg:39</tt> by opp_msgtool.
 * <pre>
 * //
 * // Base packet for RDO communication
 * //
 * packet RDOPacket
 * {
 *     int sourceId;           // ID of the sending node
 *     int destinationId = -1; // ID of the destination node (-1 for broadcast)
 *     int sequenceNumber;     // Sequence number for message ordering
 *     simtime_t timestamp;    // Timestamp when message was created
 * }
 * </pre>
 */
class RDOPacket : public ::omnetpp::cPacket
{
  protected:
    int sourceId = 0;
    int destinationId = -1;
    int sequenceNumber = 0;
    ::omnetpp::simtime_t timestamp = SIMTIME_ZERO;

  private:
    void copy(const RDOPacket& other);

  protected:
    bool operator==(const RDOPacket&) = delete;

  public:
    RDOPacket(const char *name=nullptr, short kind=0);
    RDOPacket(const RDOPacket& other);
    virtual ~RDOPacket();
    RDOPacket& operator=(const RDOPacket& other);
    virtual RDOPacket *dup() const override {return new RDOPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSourceId() const;
    virtual void setSourceId(int sourceId);

    virtual int getDestinationId() const;
    virtual void setDestinationId(int destinationId);

    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);

    virtual ::omnetpp::simtime_t getTimestamp() const;
    virtual void setTimestamp(::omnetpp::simtime_t timestamp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RDOPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RDOPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rdoexperiment/src/RDOMessage.msg:49</tt> by opp_msgtool.
 * <pre>
 * //
 * // Packet containing state information for RDO
 * //
 * packet RDOStatePacket extends RDOPacket
 * {
 *     double stateValue;      // State value
 * }
 * </pre>
 */
class RDOStatePacket : public ::inet::RDOPacket
{
  protected:
    double stateValue = 0;

  private:
    void copy(const RDOStatePacket& other);

  protected:
    bool operator==(const RDOStatePacket&) = delete;

  public:
    RDOStatePacket(const char *name=nullptr, short kind=0);
    RDOStatePacket(const RDOStatePacket& other);
    virtual ~RDOStatePacket();
    RDOStatePacket& operator=(const RDOStatePacket& other);
    virtual RDOStatePacket *dup() const override {return new RDOStatePacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual double getStateValue() const;
    virtual void setStateValue(double stateValue);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RDOStatePacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RDOStatePacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rdoexperiment/src/RDOMessage.msg:56</tt> by opp_msgtool.
 * <pre>
 * //
 * // Packet for RDO gradient information
 * //
 * packet RDOGradientPacket extends RDOPacket
 * {
 *     double gradientValue;   // Gradient value
 * }
 * </pre>
 */
class RDOGradientPacket : public ::inet::RDOPacket
{
  protected:
    double gradientValue = 0;

  private:
    void copy(const RDOGradientPacket& other);

  protected:
    bool operator==(const RDOGradientPacket&) = delete;

  public:
    RDOGradientPacket(const char *name=nullptr, short kind=0);
    RDOGradientPacket(const RDOGradientPacket& other);
    virtual ~RDOGradientPacket();
    RDOGradientPacket& operator=(const RDOGradientPacket& other);
    virtual RDOGradientPacket *dup() const override {return new RDOGradientPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual double getGradientValue() const;
    virtual void setGradientValue(double gradientValue);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RDOGradientPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RDOGradientPacket& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::RDOPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::RDOPacket*>(ptr.get<cObject>()); }
template<> inline inet::RDOStatePacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::RDOStatePacket*>(ptr.get<cObject>()); }
template<> inline inet::RDOGradientPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::RDOGradientPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_RDOMESSAGE_M_H

